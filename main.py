import asyncio
import logging
import sys
import os
import sys
import asyncio
import logging
from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å Python
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from config import BOT_TOKEN
from bot.statistics import UserStatistics
from bot.utils import UserProgress
# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

logger = logging.getLogger(__name__)


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    if not BOT_TOKEN:
        logger.error("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω! –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –∏ –¥–æ–±–∞–≤—å—Ç–µ BOT_TOKEN=your_token")
        return

    bot = Bot(token=BOT_TOKEN)
    storage = MemoryStorage()
    dp = Dispatcher(storage=storage)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º UserStatistics –û–î–ò–ù –†–ê–ó –∏ –¥–µ–ª–∞–µ–º –µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º –¥–ª—è —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤
    user_statistics = UserStatistics()
    dp["user_statistics"] = user_statistics

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º UserProgress –û–î–ò–ù –†–ê–ó –∏ –¥–µ–ª–∞–µ–º –µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º –¥–ª—è —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤
    user_progress = UserProgress()
    dp["user_progress"] = user_progress

    try:
        from bot.handlers.start import router as start_router
        from bot.handlers.lesson import router as lesson_router
        from bot.handlers.auth import router as auth_router
        from bot.commands import set_bot_commands
        from aiogram import F
        from aiogram.types import CallbackQuery

        dp.include_router(auth_router)
        print(f"üîç DEBUG: auth_router –≤–∫–ª—é—á–µ–Ω: {auth_router}")
        dp.include_router(start_router)
        print(f"üîç DEBUG: start_router –≤–∫–ª—é—á–µ–Ω")
        dp.include_router(lesson_router)
        print(f"üîç DEBUG: lesson_router –≤–∫–ª—é—á–µ–Ω")
        
        # –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–°–¢–û–Ø–ù–ò–ô (–ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –∏–∑ auth.py –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏)
        from aiogram.types import Message
        from aiogram.fsm.context import FSMContext
        from aiogram.filters import StateFilter
        from bot.states import AuthStates
        from bot.database import db_manager
        import re

        @dp.message(StateFilter(AuthStates.REGISTER_USERNAME))
        async def register_username_handler(message: Message, state: FSMContext):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
            username = message.text.strip()
            
            if len(username) < 3:
                from aiogram.utils.keyboard import InlineKeyboardBuilder
                keyboard = InlineKeyboardBuilder()
                keyboard.button(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="auth_menu")
                await message.answer(
                    "‚ùå –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞.\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                    reply_markup=keyboard.as_markup()
                )
                return
            
            if db_manager.user_exists_by_username(username):
                from aiogram.utils.keyboard import InlineKeyboardBuilder
                keyboard = InlineKeyboardBuilder()
                keyboard.button(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="auth_menu")
                await message.answer(
                    "‚ùå –≠—Ç–æ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –∑–∞–Ω—è—Ç–æ.\n"
                    "–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
                    reply_markup=keyboard.as_markup()
                )
                return
            
            await state.update_data(username=username)
            await state.set_state(AuthStates.REGISTER_EMAIL)
            
            from aiogram.utils.keyboard import InlineKeyboardBuilder
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="auth_menu")
            await message.answer(
                "üìß –í–≤–µ–¥–∏—Ç–µ <b>email</b> (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):",
                parse_mode="HTML",
                reply_markup=keyboard.as_markup()
            )


        @dp.message(StateFilter(AuthStates.REGISTER_EMAIL))
        async def register_email_handler(message: Message, state: FSMContext):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ email"""
            email = message.text.strip().lower()
            
            email_pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
            if not re.match(email_pattern, email):
                from aiogram.utils.keyboard import InlineKeyboardBuilder
                keyboard = InlineKeyboardBuilder()
                keyboard.button(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="auth_menu")
                await message.answer(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email.\n"
                    "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email:",
                    reply_markup=keyboard.as_markup()
                )
                return
            
            if db_manager.user_exists_by_email(email):
                from aiogram.utils.keyboard import InlineKeyboardBuilder
                keyboard = InlineKeyboardBuilder()
                keyboard.button(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="auth_menu")
                await message.answer(
                    "‚ùå –≠—Ç–æ—Ç email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.\n"
                    "–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π email:",
                    reply_markup=keyboard.as_markup()
                )
                return
            
            await state.update_data(email=email)
            await state.set_state(AuthStates.REGISTER_PASSWORD)
            
            from aiogram.utils.keyboard import InlineKeyboardBuilder
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="auth_menu")
            await message.answer(
                "üîí –í–≤–µ–¥–∏—Ç–µ <b>–ø–∞—Ä–æ–ª—å</b> (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤):",
                parse_mode="HTML",
                reply_markup=keyboard.as_markup()
            )

        @dp.message(StateFilter(AuthStates.REGISTER_PASSWORD))
        async def register_password_handler(message: Message, state: FSMContext):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–æ–ª—è"""
            password = message.text.strip()
            
            if len(password) < 6:
                from aiogram.utils.keyboard import InlineKeyboardBuilder
                keyboard = InlineKeyboardBuilder()
                keyboard.button(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="auth_menu")
                await message.answer(
                    "‚ùå –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤.\n"
                    "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:",
                    reply_markup=keyboard.as_markup()
                )
                return
            
            await state.update_data(password=password)
            await state.set_state(AuthStates.REGISTER_PASSWORD_CONFIRM)
            
            from aiogram.utils.keyboard import InlineKeyboardBuilder
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="auth_menu")
            await message.answer(
                "üîí <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å</b> (–≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –µ—â–µ —Ä–∞–∑ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏):",
                parse_mode="HTML",
                reply_markup=keyboard.as_markup()
            )

        @dp.message(StateFilter(AuthStates.REGISTER_PASSWORD_CONFIRM))
        async def register_password_confirm_handler(message: Message, state: FSMContext):
            """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è"""
            password_confirm = message.text.strip()
            data = await state.get_data()
            original_password = data['password']
            
            if password_confirm != original_password:
                from aiogram.utils.keyboard import InlineKeyboardBuilder
                keyboard = InlineKeyboardBuilder()
                keyboard.button(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="auth_menu")
                await message.answer(
                    "‚ùå –ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!\n"
                    "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –µ—â–µ —Ä–∞–∑:",
                    reply_markup=keyboard.as_markup()
                )
                await state.set_state(AuthStates.REGISTER_PASSWORD)
                return
            
            await state.set_state(AuthStates.REGISTER_FIRST_NAME)
            
            from aiogram.utils.keyboard import InlineKeyboardBuilder
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="auth_menu")
            await message.answer(
                "üë§ –í–≤–µ–¥–∏—Ç–µ <b>–∏–º—è</b> (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –Ω–∞–∂–º–∏—Ç–µ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):",
                parse_mode="HTML",
                reply_markup=keyboard.as_markup()
            )

        @dp.message(StateFilter(AuthStates.REGISTER_FIRST_NAME))
        async def register_first_name_handler(message: Message, state: FSMContext):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏"""
            if message.text.strip().lower() == '/skip':
                await state.update_data(first_name="")
            else:
                await state.update_data(first_name=message.text.strip())
            
            await state.set_state(AuthStates.REGISTER_LAST_NAME)
            
            from aiogram.utils.keyboard import InlineKeyboardBuilder
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="auth_menu")
            await message.answer(
                "üë§ –í–≤–µ–¥–∏—Ç–µ <b>—Ñ–∞–º–∏–ª–∏—é</b> (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –Ω–∞–∂–º–∏—Ç–µ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):",
                parse_mode="HTML",
                reply_markup=keyboard.as_markup()
            )

        @dp.message(StateFilter(AuthStates.REGISTER_LAST_NAME))
        async def register_last_name_handler(message: Message, state: FSMContext):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–º–∏–ª–∏–∏"""
            if message.text.strip().lower() == '/skip':
                await state.update_data(last_name="")
            else:
                await state.update_data(last_name=message.text.strip())
            
            await state.set_state(AuthStates.REGISTER_CONFIRM)
            
            data = await state.get_data()
            
            confirm_text = "üìù <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b>\n\n"
            confirm_text += f"üë§ <b>–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> {data['username']}\n"
            confirm_text += f"üìß <b>Email:</b> {data['email']}\n"
            confirm_text += f"üîí <b>–ü–∞—Ä–æ–ª—å:</b> {'*' * len(data['password'])}\n"
            if data.get('first_name'):
                confirm_text += f"üë§ <b>–ò–º—è:</b> {data['first_name']}\n"
            if data.get('last_name'):
                confirm_text += f"üë§ <b>–§–∞–º–∏–ª–∏—è:</b> {data['last_name']}\n"
            
            from aiogram.utils.keyboard import InlineKeyboardBuilder
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="register_confirm")
            keyboard.button(text="üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="auth_register")
            keyboard.button(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="auth_menu")
            keyboard.adjust(2, 1)
            
            await message.answer(
                confirm_text,
                parse_mode="HTML",
                reply_markup=keyboard.as_markup()
            )

        @dp.message(StateFilter(AuthStates.LOGIN_EMAIL))
        async def login_email_handler(message: Message, state: FSMContext):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ email –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
            email = message.text.strip().lower()
            
            if not db_manager.user_exists_by_email(email):
                from aiogram.utils.keyboard import InlineKeyboardBuilder
                keyboard = InlineKeyboardBuilder()
                keyboard.button(text="üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data="auth_register")
                keyboard.button(text="üîë –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è", callback_data="auth_login")
                keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
                keyboard.adjust(2, 1)
                await message.answer(
                    "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –Ω–µ –Ω–∞–π–¥–µ–Ω.\n"
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ email –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å:",
                    reply_markup=keyboard.as_markup()
                )
                await state.clear()
                return
            
            await state.update_data(email=email)
            await state.set_state(AuthStates.LOGIN_PASSWORD)
            
            from aiogram.utils.keyboard import InlineKeyboardBuilder
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="auth_menu")
            await message.answer(
                "üîí –í–≤–µ–¥–∏—Ç–µ –≤–∞—à <b>–ø–∞—Ä–æ–ª—å</b>:",
                parse_mode="HTML",
                reply_markup=keyboard.as_markup()
            )

        @dp.message(StateFilter(AuthStates.LOGIN_PASSWORD))
        async def login_password_handler(message: Message, state: FSMContext):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–æ–ª—è –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
            password = message.text.strip()
            data = await state.get_data()
            email = data['email']
            telegram_id = message.from_user.id
            
            print(f"üîç DEBUG: –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ - Email: {email}, Telegram ID: {telegram_id}")
            
            try:
                user = db_manager.authenticate_user(email, password)
                
                if user:
                    print(f"üîç DEBUG: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω - ID: {user['id']}, Username: {user['username']}")
                    
                    # –í—Å–µ–≥–¥–∞ –æ–±–Ω–æ–≤–ª—è–µ–º telegram_id –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                    update_success = db_manager.update_telegram_id(user['id'], telegram_id)
                    print(f"üîç DEBUG: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ telegram_id: {'—É—Å–ø–µ—à–Ω–æ' if update_success else '–æ—à–∏–±–∫–∞'}")
                    
                    from aiogram.utils.keyboard import InlineKeyboardBuilder
                    keyboard = InlineKeyboardBuilder()
                    keyboard.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                    await message.answer(
                        "‚úÖ <b>–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!</b>\n\n"
                        f"üë§ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user['username']}!\n"
                        f"üìß Email: {user['email']}\n"
                        f"üÜî Telegram ID: {telegram_id}\n\n"
                        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞!",
                        parse_mode="HTML",
                        reply_markup=keyboard.as_markup()
                    )
                else:
                    from aiogram.utils.keyboard import InlineKeyboardBuilder
                    keyboard = InlineKeyboardBuilder()
                    keyboard.button(text="üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data="auth_register")
                    keyboard.button(text="üîë –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è", callback_data="auth_login")
                    keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
                    keyboard.adjust(2, 1)
                    await message.answer(
                        "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!</b>\n\n"
                        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ä–æ–ª—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
                        reply_markup=keyboard.as_markup()
                    )
            except Exception as e:
                print(f"üîç DEBUG: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
                from aiogram.utils.keyboard import InlineKeyboardBuilder
                keyboard = InlineKeyboardBuilder()
                keyboard.button(text="üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data="auth_register")
                keyboard.button(text="üîë –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è", callback_data="auth_login")
                keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
                keyboard.adjust(2, 1)
                await message.answer(
                    "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏!</b>\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                    parse_mode="HTML",
                    reply_markup=keyboard.as_markup()
                )
            
            await state.clear()

    except ImportError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {e}")
        return

    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    logger.info("üéØ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: –ê–Ω–≥–ª–∏–π—Å–∫–∏–π –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–≤ –∏ Data Science")

    try:
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
    finally:
        await bot.session.close()


if __name__ == "__main__":
    asyncio.run(main())
