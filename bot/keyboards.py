import os
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder


def get_start_keyboard():
    """–°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞"""
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="–ù–∞—á–∞—Ç—å —É—Ä–æ–∫ üìö", callback_data="start_lesson")
    return keyboard.as_markup()


def get_next_keyboard():
    """–ö–Ω–æ–ø–∫–∞ '–î–∞–ª—å—à–µ'"""
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="–î–∞–ª—å—à–µ ‚û°Ô∏è", callback_data="next")
    return keyboard.as_markup()


def get_skip_next_keyboard():
    """–ö–Ω–æ–ø–∫–∏ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å' –∏ '–î–∞–ª—å—à–µ'"""
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚è≠Ô∏è", callback_data="skip")
    keyboard.button(text="–î–∞–ª—å—à–µ ‚û°Ô∏è", callback_data="next")
    keyboard.adjust(2)
    return keyboard.as_markup()


def get_pronunciation_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –±–ª–æ–∫–∞ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è"""
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="–ó–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ üé§", callback_data="record_pronunciation")
    # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞: —Å–∫–∞–∑–∞—Ç—å –º–µ–¥–ª–µ–Ω–Ω–µ–µ
    keyboard.button(text="–°–∫–∞–∑–∞—Ç—å –º–µ–¥–ª–µ–Ω–Ω–µ–µ üê¢", callback_data="slow_down_pronunciation")
    keyboard.button(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚è≠Ô∏è", callback_data="skip_pronunciation")
    keyboard.adjust(1)
    return keyboard.as_markup()


def get_pronunciation_result_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è"""
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="–î–∞–ª—å—à–µ ‚û°Ô∏è", callback_data="next_pronunciation")
    keyboard.button(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚è≠Ô∏è", callback_data="skip_pronunciation")
    # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞: –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —Å–ª–æ–≤–æ/—Ñ—Ä–∞–∑—É
    keyboard.button(text="–ü–æ–≤—Ç–æ—Ä–∏—Ç—å üîÅ", callback_data="repeat_pronunciation")
    keyboard.adjust(
        2)  # adjust(2) –æ—Å—Ç–∞–≤–∏—Ç "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å" –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤—Å–µ 3 –≤ —Ä—è–¥, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ adjust(3)
    return keyboard.as_markup()


def get_choice_keyboard(options: list, word: str = ""):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –ª–µ–∫—Å–∏—á–µ—Å–∫–∏—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π"""
    keyboard = InlineKeyboardBuilder()
    for i, option in enumerate(options):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º word –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ callback_data
        callback_data = f"lexical_{word}_{option}"[:64]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
        keyboard.button(text=option, callback_data=callback_data)
    keyboard.adjust(1)
    return keyboard.as_markup()


def get_grammar_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ—Å–ª–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏"""
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="–í—Å—ë –ø–æ–Ω—è—Ç–Ω–æ ‚úÖ", callback_data="grammar_understood")
    keyboard.button(text="–ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å–∏–∫–∏ ‚ùì", callback_data="grammar_questions")
    keyboard.adjust(1)
    return keyboard.as_markup()


def get_grammar_qa_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤ —Ä–µ–∂–∏–º–µ –≤–æ–ø—Ä–æ—Å–æ–≤-–æ—Ç–≤–µ—Ç–æ–≤"""
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="–¢–µ–ø–µ—Ä—å –≤—Å—ë –ø–æ–Ω—è—Ç–Ω–æ ‚úÖ", callback_data="grammar_now_understood")
    keyboard.button(text="–û—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã ‚ùì", callback_data="grammar_still_questions")
    keyboard.adjust(1)
    return keyboard.as_markup()


def get_main_menu_keyboard():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞"""
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üìö –ù–∞—á–∞—Ç—å —É—Ä–æ–∫", callback_data="start_lesson")
    keyboard.button(text="üìñ –¢–µ—Ä–º–∏–Ω—ã", callback_data="menu_terms")
    keyboard.button(text="üó£Ô∏è –ü—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ", callback_data="menu_pronunciation")
    keyboard.button(text="üìù –õ–µ–∫—Å–∏–∫–∞", callback_data="menu_lexical")
    keyboard.button(text="üìö –ì—Ä–∞–º–º–∞—Ç–∏–∫–∞", callback_data="menu_grammar")
    keyboard.button(text="‚úèÔ∏è –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è", callback_data="menu_exercises")
    keyboard.button(text="üéß –ê—É–¥–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="menu_listening")
    keyboard.button(text="‚úçÔ∏è –ü–∏—Å—å–º–æ", callback_data="menu_writing")
    keyboard.button(text="üí¨ –ì–æ–≤–æ—Ä–µ–Ω–∏–µ", callback_data="menu_speaking")
    keyboard.button(text="üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫", callback_data="restart_lesson")
    keyboard.button(text="üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="show_statistics")
    keyboard.button(text="üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è / –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data="auth_menu")
    keyboard.adjust(1, 2, 2, 2, 2, 2, 1, 1, 1)
    return keyboard.as_markup()


def get_block_menu_keyboard():
    """–ú–µ–Ω—é –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –±–ª–æ–∫–∞–º"""
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    keyboard.button(text="üìö –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —É—Ä–æ–∫", callback_data="continue_lesson")
    keyboard.adjust(2)
    return keyboard.as_markup()


def get_mchoice_keyboard(options: list, question_index: int = 0):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞"""
    keyboard = InlineKeyboardBuilder()
    for i, option in enumerate(options):
        callback_data = f"mchoice_{question_index}_{i}_{option}"[:64]
        keyboard.button(text=option, callback_data=callback_data)
    keyboard.adjust(1)
    return keyboard.as_markup()


def get_text_exercise_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π"""
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚è≠Ô∏è", callback_data="skip_text_exercise")
    return keyboard.as_markup()


def get_true_false_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ True/False –¥–ª—è –∞—É–¥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="True ‚úÖ", callback_data="listening_true")
    keyboard.button(text="False ‚ùå", callback_data="listening_false")
    keyboard.button(text="–°–∫–∞–∑–∞—Ç—å –º–µ–¥–ª–µ–Ω–Ω–µ–µ üê¢", callback_data="listening_slow_down")
    keyboard.adjust(2,1)
    return keyboard.as_markup()


def get_listening_choice_keyboard(options: list, question_index: int = 0):
    keyboard = InlineKeyboardBuilder()
    for i, option in enumerate(options):
        callback_data = f"listening_choice_{question_index}_{i}_{option}"[:64]
        keyboard.button(text=option, callback_data=callback_data)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–º–µ–¥–ª–µ–Ω–∏—è —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º callback_data
    keyboard.button(text="–°–∫–∞–∑–∞—Ç—å –º–µ–¥–ª–µ–Ω–Ω–µ–µ üê¢", callback_data="listening_choice_slow_down")
    keyboard.adjust(1, repeat=True)
    return keyboard.as_markup()


def get_listening_phrases_keyboard():
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="–ó–∞–ø–∏—Å–∞—Ç—å —Ñ—Ä–∞–∑—É üé§", callback_data="record_phrase")
    keyboard.button(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ—Ä–∞–∑—É ‚è≠Ô∏è", callback_data="skip_phrase")
    keyboard.button(text="–°–∫–∞–∑–∞—Ç—å –º–µ–¥–ª–µ–Ω–Ω–µ–µ üê¢", callback_data="listening_phrases_slow_down")
    keyboard.adjust(1, 2)
    return keyboard.as_markup()


def get_phrase_result_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è"""
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="–î–∞–ª—å—à–µ ‚û°Ô∏è", callback_data="next_phrase")
    return keyboard.as_markup()


def get_continue_writing_keyboard():
    """–ö–Ω–æ–ø–∫–∞ '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —É—Ä–æ–∫' –¥–ª—è –ø–∏—Å—å–º–µ–Ω–Ω—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π"""
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —É—Ä–æ–∫ ‚û°Ô∏è", callback_data="continue_writing")
    return keyboard.as_markup()


def get_writing_skip_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –ø–∏—Å—å–º–µ–Ω–Ω—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π"""
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚è≠Ô∏è", callback_data="skip_writing")
    return keyboard.as_markup()


def get_speaking_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –±–ª–æ–∫–∞ –≥–æ–≤–æ—Ä–µ–Ω–∏—è"""
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="–ó–∞–ø–∏—Å–∞—Ç—å –º—ã—Å–ª–∏ üé§", callback_data="record_speaking")
    keyboard.button(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚è≠Ô∏è", callback_data="skip_speaking")
    return keyboard.as_markup()


def get_speaking_result_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞ –≥–æ–≤–æ—Ä–µ–Ω–∏—è"""
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="–°–ª–µ–¥—É—é—â–∞—è —Ç–µ–º–∞ ‚û°Ô∏è", callback_data="next_speaking")
    keyboard.button(text="–ó–∞–ø–∏—Å–∞—Ç—å –µ—â–µ —Ä–∞–∑ üîÑ", callback_data="retry_speaking")
    keyboard.adjust(1)
    return keyboard.as_markup()


def get_word_build_keyboard(parts: list, collected: str = ""):
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —á–∞—Å—Ç—è–º–∏ —Å–ª–æ–≤–∞ –¥–ª—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–∞ —Å–±–æ—Ä–∫—É.

    :param parts: —Å–ø–∏—Å–æ–∫ —á–∞—Å—Ç–µ–π —Å–ª–æ–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, ["pix", "el"])
    :param collected: —É–∂–µ —Å–æ–±—Ä–∞–Ω–Ω—ã–µ —á–∞—Å—Ç–∏ (–¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è)
    :return: InlineKeyboardMarkup
    """
    kb = InlineKeyboardBuilder()

    for part in parts:
        kb.button(text=part, callback_data=f"wb_part_{part}")

    kb.button(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å", callback_data="wb_check")
    kb.button(text="‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="wb_skip")
    kb.adjust(2)  # –î–µ–ª–∞–µ–º –ø–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥

    return kb.as_markup()


def get_final_keyboard():
    """–§–∏–Ω–∞–ª—å–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫—É—Ä—Å–∞"""
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    keyboard.button(text="üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="restart_lesson")
    keyboard.adjust(2)
    return keyboard.as_markup()


def get_continue_keyboard():
    """–ö–Ω–æ–ø–∫–∞ '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å' –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞"""
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚û°Ô∏è", callback_data="continue_exercise")
    return keyboard.as_markup()


def get_keyboard_with_menu(current_keyboard: InlineKeyboardMarkup) -> InlineKeyboardMarkup:
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫—É 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.

    :param current_keyboard: –¢–µ–∫—É—â–∞—è InlineKeyboardMarkup, –∫ –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É.
    :return: –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è InlineKeyboardMarkup —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'.
    """
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π InlineKeyboardBuilder –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    builder = InlineKeyboardBuilder()
    builder.attach(InlineKeyboardBuilder.from_markup(current_keyboard))

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    builder.row(InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))

    return builder.as_markup()


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
def get_auth_choice_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –º–µ–∂–¥—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π"""
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data="auth_register")
    keyboard.button(text="üîë –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è", callback_data="auth_login")
    keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
    keyboard.adjust(2, 1)
    return keyboard.as_markup()


def get_register_confirm_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="register_confirm")
    keyboard.button(text="üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="auth_register")
    keyboard.button(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="auth_menu")
    keyboard.adjust(2, 1)
    return keyboard.as_markup()


def get_auth_cancel_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç–º–µ–Ω—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="auth_menu")
    return keyboard.as_markup()