import sys
import os
import traceback
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))
import re
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from bot.statistics import UserStatistics

from bot.keyboards import (get_next_keyboard, get_pronunciation_keyboard, get_pronunciation_result_keyboard,
                         get_choice_keyboard, get_continue_keyboard, get_grammar_keyboard, get_grammar_qa_keyboard,
                         get_mchoice_keyboard, get_text_exercise_keyboard, get_true_false_keyboard,
                         get_listening_choice_keyboard, get_listening_phrases_keyboard, get_phrase_result_keyboard,
                         get_main_menu_keyboard, get_continue_writing_keyboard, get_writing_skip_keyboard,
                         get_speaking_keyboard, get_speaking_result_keyboard, get_final_keyboard, get_word_build_keyboard)
from bot.states import LessonStates
from bot.utils import (load_json_data, UserProgress, generate_audio, simple_pronunciation_check,
                       get_teacher_response, check_writing_with_ai, analyze_speaking_with_ai,
                       transcribe_audio_simple, analyze_phonemes_with_gpt)

from config import MESSAGES, IMAGES_PATH, CURRENT_LESSON_ID
from config import OPENAI_API_KEY
from bot.utils import convert_ogg_to_wav
from aiogram.exceptions import TelegramBadRequest
from datetime import datetime # –î–æ–±–∞–≤—å—Ç–µ, –µ—Å–ª–∏ –Ω–µ—Ç
from typing import Callable, Awaitable, Dict, List, Tuple, Any
import shutil
import logging
import os
from bot.utils import UserProgress

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
os.makedirs("logs", exist_ok=True)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(
    filename="logs/user_interactions.log",
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | [%(filename)s] %(message)s",
    encoding="utf-8",
    force=True
)

# –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é
def log_user_result(user_id, result_type, result_data):
    print(f"–õ–æ–≥–≥–∏—Ä—É—é: {user_id}")  # –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logging.info(f"USER_ID: {user_id} | RESULT_TYPE: {result_type} | DATA: {result_data}")

router = Router()



def get_keyboard_with_menu(original_keyboard):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∫ –ª—é–±–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ"""
    from aiogram.utils.keyboard import InlineKeyboardBuilder

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π
    keyboard = InlineKeyboardBuilder()

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    if hasattr(original_keyboard, 'inline_keyboard'):
        for row in original_keyboard.inline_keyboard:
            for button in row:
                keyboard.button(text=button.text, callback_data=button.callback_data)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
    # keyboard.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    # keyboard.button(text="üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫", callback_data="restart_lesson")

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    keyboard.adjust(1, 1, 2)  # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç–æ–ª–±–µ—Ü, –º–µ–Ω—é –≤ —Å—Ç—Ä–æ–∫—É
    return keyboard.as_markup()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–µ–Ω—é - –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑ –ª—é–±–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
@router.callback_query(F.data == "main_menu")
async def handle_main_menu(callback: CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ –ª—é–±–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    await callback.message.edit_text(
        "üè† **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n"
        "üéØ **–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:** –ê–Ω–≥–ª–∏–π—Å–∫–∏–π –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–≤, Data Science –∏ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode="Markdown",
        reply_markup=get_main_menu_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data == "restart_lesson")
async def handle_restart_lesson(callback: CallbackQuery, state: FSMContext, user_progress: UserProgress):
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —É—Ä–æ–∫–∞ –∏–∑ –ª—é–±–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å
    await state.clear()
    user_progress.reset_progress(callback.from_user.id)

    try:
        await callback.message.edit_text(
            "üîÑ –£—Ä–æ–∫ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω! –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ.\n\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_menu_keyboard()
        )
    except Exception:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        await callback.message.answer(
            "üîÑ –£—Ä–æ–∫ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω! –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ.\n\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_menu_keyboard()
        )

    await callback.answer()


async def start_terms_block(
        user_id: int,
        message: Message,
        state: FSMContext,
        user_statistics: UserStatistics, user_progress: UserProgress
):
    print(f"DEBUG (start_terms_block): –ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    terms_data = {}  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–º —Å–ª–æ–≤–∞—Ä–µ–º –Ω–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏
    try:
        terms_data = await load_json_data("1_terms.json")
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞: –≤—ã–≤–æ–¥–∏–º —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –∏ –Ω–∞—á–∞–ª–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        print(
            f"DEBUG (start_terms_block): –î–∞–Ω–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –¢–∏–ø: {type(terms_data)}, –°–æ–¥–µ—Ä–∂–∏–º–æ–µ (–ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤): {str(terms_data)[:100]}")
    except Exception as e:
        # –ï—Å–ª–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –ª—é–±–∞—è –æ—à–∏–±–∫–∞, –º—ã —ç—Ç–æ –ø–æ–π–º–∞–µ–º
        print(f"ERROR (start_terms_block): –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ 1_terms.json: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö —É—Ä–æ–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ terms_data –Ω–µ –ø—É—Å—Ç, —è–≤–ª—è–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä–µ–º –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á "terms", –∫–æ—Ç–æ—Ä—ã–π —è–≤–ª—è–µ—Ç—Å—è —Å–ø–∏—Å–∫–æ–º
    if not terms_data or not isinstance(terms_data, dict) or "terms" not in terms_data or not isinstance(
            terms_data["terms"], list):
        await message.answer(
            "–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω–æ–≤ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–ª–∏ –∏–º–µ—é—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤ —Ñ–∞–π–ª–µ 1_terms.json. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        print(
            "ERROR (start_terms_block): terms_data –ø—É—Å—Ç, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä–µ–º, –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á 'terms' (–∏–ª–∏ 'terms' –Ω–µ —Å–ø–∏—Å–æ–∫).")
        return  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ø–∏—Å–æ–∫ —Ç–µ—Ä–º–∏–Ω–æ–≤ –Ω–µ –ø—É—Å—Ç
    if not terms_data["terms"]:
        await message.answer("–û—à–∏–±–∫–∞: –°–ø–∏—Å–æ–∫ —Ç–µ—Ä–º–∏–Ω–æ–≤ –≤ —Ñ–∞–π–ª–µ 1_terms.json –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ —Ç–µ—Ä–º–∏–Ω—ã.")
        print("ERROR (start_terms_block): –°–ø–∏—Å–æ–∫ —Ç–µ—Ä–º–∏–Ω–æ–≤ –≤ —Ñ–∞–π–ª–µ 1_terms.json –ø—É—Å—Ç.")
        return  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏

    await state.update_data(terms=terms_data["terms"], current_term=0)
    print(f"DEBUG (start_terms_block): –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: current_term=0, –≤—Å–µ–≥–æ —Ç–µ—Ä–º–∏–Ω–æ–≤={len(terms_data['terms'])}")

    # –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –¥–æ–ª–∂–Ω–æ –∏–¥—Ç–∏ –≤—Ç–æ—Ä—ã–º, –Ω–æ —Å–µ–π—á–∞—Å –Ω–µ –ø–æ—è–≤–ª—è–µ—Ç—Å—è
    await message.answer(MESSAGES["terms_intro"])

    await show_current_term(user_id, message, state, user_statistics, user_progress)




async def show_current_term(
    user_id: int,
    message: Message,
    state: FSMContext,
    user_statistics: UserStatistics, user_progress: UserProgress # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∑–¥–µ—Å—å –µ—Å—Ç—å user_statistics
):
    print(f"DEBUG (show_current_term): –ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    data = await state.get_data()
    terms = data.get("terms", [])
    current_index = data.get("current_term", 0)
    print(f"DEBUG (show_current_term): –ò–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è: —Ç–µ—Ä–º–∏–Ω–æ–≤={len(terms)}, —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å={current_index}")

    if current_index >= len(terms):
        print(f"DEBUG (show_current_term): –£—Å–ª–æ–≤–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –±–ª–æ–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: current_index ({current_index}) >= len(terms) ({len(terms)}).")
        # –í—Å–µ —Ç–µ—Ä–º–∏–Ω—ã –∏–∑—É—á–µ–Ω—ã
        await message.answer(
            MESSAGES["terms_complete"],
            reply_markup=get_keyboard_with_menu(get_next_keyboard())
        )
        await state.set_state(LessonStates.TERMS_COMPLETE)
        # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–µ—Ä–µ–¥–∞—á–∞ lesson_id –≤ update_block_status
        user_statistics.update_block_status(user_id, "terms", completed=True, lesson_id=CURRENT_LESSON_ID)
        print(f"DEBUG: –°—Ç–∞—Ç—É—Å –±–ª–æ–∫–∞ —Ç–µ—Ä–º–∏–Ω–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (–∏–∑ next_term).")

        return # –í—ã—Ö–æ–¥ –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏

    current_term = terms[current_index]
    print(f"DEBUG (show_current_term): –û—Ç–æ–±—Ä–∞–∂–∞—é —Ç–µ—Ä–º–∏–Ω: '{current_term['english']}'")

    # –≠—Ç–∞–ø 1: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —Ç–µ—Ä–º–∏–Ω
    await message.answer(
        f"üìù **–¢–µ—Ä–º–∏–Ω:** {current_term['english']}",
        parse_mode="Markdown"
    )

    # –≠—Ç–∞–ø 2: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥
    await message.answer(
        f"üá∑üá∫ **–ü–µ—Ä–µ–≤–æ–¥:** {current_term['russian']}",
        parse_mode="Markdown"
    )

    # –≠—Ç–∞–ø 3: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
    await message.answer(
        f"üî§ **–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è:** {current_term['transcription']}",
        parse_mode="Markdown"
    )

    # –≠—Ç–∞–ø 4: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É (–µ—Å–ª–∏ –µ—Å—Ç—å)
    image_path = os.path.join(IMAGES_PATH, current_term.get("image", ""))
    if os.path.exists(image_path):
        try:
            photo = FSInputFile(image_path)
            await message.answer_photo(photo)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            await message.answer("–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
    else:
        await message.answer("–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")

        # –≠—Ç–∞–ø 5: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ
    audio_filename = f"term_{current_index}_{current_term['english'].replace(' ', '_')}"
    audio_path = await generate_audio(current_term['english'], audio_filename, 'en')

    try:
        if audio_path and os.path.exists(audio_path):
            audio = FSInputFile(audio_path)
            await message.answer_voice(
                voice=audio, # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: voice=audio –≤–º–µ—Å—Ç–æ voice=FSInputFile(audio_path)
                caption="üîä **–ü—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ**",
                parse_mode="Markdown"
            )
            print(f"DEBUG (show_current_term): –ê—É–¥–∏–æ —Ñ–∞–π–ª '{audio_path}' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
        else:
            print(f"DEBUG (show_current_term): –ê—É–¥–∏–æ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: '{audio_path}'")
            await message.answer("üîä **–ü—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ:** (–∞—É–¥–∏–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)")
    except Exception as e:
        print(f"CRITICAL ERROR (show_current_term): –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞—É–¥–∏–æ: {e}")
        await message.answer("üîä **–ü—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ:** (–∞—É–¥–∏–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞!)")

    # –û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π –±–ª–æ–∫: –ö–Ω–æ–ø–∫–∞ "–î–∞–ª—å—à–µ" –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    try:
        await message.answer(
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–î–∞–ª—å—à–µ¬ª –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è",
            reply_markup=get_keyboard_with_menu(get_next_keyboard())
        )
        print(f"DEBUG (show_current_term): –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π '–î–∞–ª—å—à–µ' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")

        user_progress.update_progress(user_id=user_id, current_block="terms", current_item=current_index + 1)
        print(f"DEBUG (show_current_term): –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–±–Ω–æ–≤–ª–µ–Ω.")

        await state.set_state(LessonStates.TERMS_SHOW_AUDIO)
        print(
            f"DEBUG (show_current_term): –°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ LessonStates.TERMS_SHOW_AUDIO –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    except Exception as e:
        print(
            f"CRITICAL ERROR (show_current_term): –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è/–∫–Ω–æ–ø–∫–∏ –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
        await message.answer("‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —É—Ä–æ–∫.")

@router.callback_query(F.data == "next", LessonStates.TERMS_SHOW_AUDIO)
async def next_term(

    callback: CallbackQuery,
    state: FSMContext,
    user_progress: UserProgress,
    user_statistics: UserStatistics # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç
):
    print(f"--- DEBUG: –§—É–Ω–∫—Ü–∏—è next_term –í–´–ó–í–ê–ù–ê! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {callback.from_user.id} ---")
    user_id = callback.from_user.id
    print(f"DEBUG (next_term): –û–±—Ä–∞–±–æ—Ç–∫–∞ 'next' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ TERMS_SHOW_AUDIO.")

    data = await state.get_data()
    terms = data.get("terms", [])
    current_index = data.get("current_term", 0)

    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–µ—Ä–º–∏–Ω–∞
    new_index = current_index + 1
    print(f"DEBUG (next_term): –°—Ç–∞—Ä—ã–π –∏–Ω–¥–µ–∫—Å: {current_index}, –ù–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å: {new_index}.")

    if new_index >= len(terms):
        print(f"DEBUG (next_term): –í—Å–µ —Ç–µ—Ä–º–∏–Ω—ã –ø—Ä–æ–π–¥–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}. –ù–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å: {new_index}, –í—Å–µ–≥–æ —Ç–µ—Ä–º–∏–Ω–æ–≤: {len(terms)}.")

        # 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –±–ª–æ–∫–∞ —Ç–µ—Ä–º–∏–Ω–æ–≤ –∏ –ø–µ—Ä–µ—Ö–æ–¥–µ
        await callback.message.edit_text(
            "üéâ –ë–ª–æ–∫ —Ç–µ—Ä–º–∏–Ω–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
            "–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –±–ª–æ–∫—É –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è..."
        )

        # 2. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –±–ª–æ–∫–∞ —Ç–µ—Ä–º–∏–Ω–æ–≤ –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –≤ user_statistics
        # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–µ—Ä–µ–¥–∞—á–∞ lesson_id –≤ update_block_status
        user_statistics.update_block_status(user_id, "terms", completed=True, lesson_id=CURRENT_LESSON_ID)

        print(f"DEBUG: –°—Ç–∞—Ç—É—Å –±–ª–æ–∫–∞ —Ç–µ—Ä–º–∏–Ω–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (–∏–∑ next_term).")

        # 3. –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –±–ª–æ–∫ (–ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ)
        user_progress.update_progress(
            user_id,
            current_block="pronunciation",
            current_item=0
        )
        print(f"DEBUG: –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –±–ª–æ–∫–∞ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è (–∏–∑ next_term).")

        # 4. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ –Ω–∞ –Ω–∞—á–∞–ª–æ –±–ª–æ–∫–∞ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è
        await state.set_state(LessonStates.PRONUNCIATION_LISTEN)
        print(f"DEBUG: –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ LessonStates.PRONUNCIATION_LISTEN (–∏–∑ next_term).")

        # 5. –ó–∞–ø—É—Å–∫–∞–µ–º –±–ª–æ–∫ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è
        await start_pronunciation_block(user_id, callback.message, state, user_statistics, user_progress)
        print(f"DEBUG: start_pronunciation_block –≤—ã–∑–≤–∞–Ω (–∏–∑ next_term).")

    else:
        # –û–ë–ù–û–í–õ–Ø–ï–ú –°–û–°–¢–û–Ø–ù–ò–ï —Å –Ω–æ–≤—ã–º –∏–Ω–¥–µ–∫—Å–æ–º
        await state.update_data(current_term=new_index)
        print(f"DEBUG (next_term): –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: current_term={new_index}.")
        print(f"DEBUG (next_term): –û—Ç–æ–±—Ä–∞–∂–∞—é —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ—Ä–º–∏–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}. –ò–Ω–¥–µ–∫—Å: {new_index}.")
        # –í—ã–∑—ã–≤–∞–µ–º show_current_term —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
        await show_current_term(user_id, callback.message, state, user_statistics, user_progress)

    # –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callbackQuery, —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ –Ω–µ –≤–∏—Å–µ–ª–∞ "–Ω–∞–∂–∞—Ç–æ–π"
    await callback.answer()


#    @router.callback_query(F.data == "next", LessonStates.TERMS_COMPLETE)
#    async def terms_complete_next(
#        callback: CallbackQuery,
#        state: FSMContext,
#        user_statistics: UserStatistics, # <--- –î–û–ë–ê–í–¨–¢–ï –≠–¢–û–¢ –ê–†–ì–£–ú–ï–ù–¢
#        user_progress: UserProgress      # <--- –î–û–ë–ê–í–¨–¢–ï –≠–¢–û–¢ –ê–†–ì–£–ú–ï–ù–¢
#    ):
#        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –±–ª–æ–∫–∞ —Ç–µ—Ä–º–∏–Ω–æ–≤ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—é"""
#        await callback.message.edit_text(
#            "üéâ –ë–ª–æ–∫ —Ç–µ—Ä–º–∏–Ω–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
#            "–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –±–ª–æ–∫—É –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è..."
#        )
#
#        user_progress.update_progress(
#            callback.from_user.id,
#            current_block="pronunciation",
#            current_item=0
#        ) # –¢–µ–ø–µ—Ä—å user_progress –¥–æ—Å—Ç—É–ø–µ–Ω
#        print(f"DEBUG: –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id} –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –±–ª–æ–∫–∞ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è.")
#
#        # user_statistics: UserStatistics = router.parent_router["user_statistics"] # <--- –£–î–ê–õ–ò–¢–ï –≠–¢–£ –°–¢–†–û–ö–£!
#        # –¢–µ–ø–µ—Ä—å user_statistics –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç
#        if user_statistics.is_terms_block_completed(callback.from_user.id):
#            user_statistics.increment_lessons_completed_count(callback.from_user.id)
#            print(f"DEBUG: –£—Ä–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}. –í—Å–µ–≥–æ —É—Ä–æ–∫–æ–≤: {user_statistics.get_user_stats(callback.from_user.id)['lessons_completed_count']}")
#        else:
#             print(f"DEBUG: –ë–ª–æ–∫ —Ç–µ—Ä–º–∏–Ω–æ–≤ –Ω–µ –±—ã–ª –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}.")
#
#        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–ª–æ–∫ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è
#        # –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏–≥–Ω–∞—Ç—É—Ä—É start_pronunciation_block: –µ—Å–ª–∏ –æ–Ω –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ user_statistics/user_progress,
#        # —Ç–æ –∏—Ö –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞—Ç—å –∑–¥–µ—Å—å:
#        # await start_pronunciation_block(callback.message, state, user_statistics, user_progress)
#         # –ï—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω—ã, —Ç–æ —Ç–∞–∫
#        await callback.answer()
#        await start_pronunciation_block(callback.message, state, user_statistics, user_progress)



@router.message(F.voice, LessonStates.PRONUNCIATION_RECORD)
async def process_pronunciation_recording(message: Message, state: FSMContext, user_progress: UserProgress,
    user_statistics: UserStatistics):
    data = await state.get_data()
    text_to_check = data.get("current_pronunciation_text")

    if not text_to_check:
        await message.answer("–ò–∑–≤–∏–Ω–∏, –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —Ç–µ–∫—É—â–µ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.")
        return

    async def handle_result(overall_accuracy: float, verdict: str, analysis_text: str,
                            expected_phonemes: str, user_phonemes: str, word_results: List[Dict]):
        full_response = f"{verdict}" # –ù–∞—á–∏–Ω–∞–µ–º —Ç–æ–ª—å–∫–æ —Å –≤–µ—Ä–¥–∏–∫—Ç–∞

        # –ï—Å–ª–∏ —Ç–æ—á–Ω–æ—Å—Ç—å –Ω–µ "–û—Ç–ª–∏—á–Ω–æ" –∏ –Ω–µ "–ù–µ—Ä–∞–∑–±–æ—Ä—á–∏–≤–æ" (—Ç.–µ. "–•–æ—Ä–æ—à–æ, –Ω–æ –º–æ–∂–Ω–æ –ª—É—á—à–µ!")
        # –ò –µ—Å—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if overall_accuracy < 85.0 and analysis_text: # –£—Å–ª–æ–≤–∏–µ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏ –∏ –æ–±—ã—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
             full_response += f"\n\nüéØ <b>–¢–æ—á–Ω–æ—Å—Ç—å:</b> {overall_accuracy:.1f}%\n{analysis_text}"

        gpt_analysis_output = None
        # –í—ã–∑–æ–≤ GPT-–∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ verdict –Ω–µ "–û—Ç–ª–∏—á–Ω–æ" –∏ –Ω–µ "–ù–µ—Ä–∞–∑–±–æ—Ä—á–∏–≤–æ",
        # –∏ –µ—Å–ª–∏ –µ—Å—Ç—å word_results –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        # (—ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ overall_accuracy –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –º–µ–∂–¥—É –ø–æ—Ä–æ–≥–∞–º–∏)
        if word_results and analysis_text: # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –æ—à–∏–±–∫–∏, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –¥–µ–ª–∞–ª—Å—è –∞–Ω–∞–ª–∏–∑
            gpt_analysis_output = await analyze_phonemes_with_gpt(
                original_text=text_to_check,
                expected_phonemes=expected_phonemes,
                user_phonemes=user_phonemes,
                overall_accuracy=overall_accuracy,
                word_errors_analysis=word_results
            )

        if gpt_analysis_output:
            full_response += f"\n\n---\nü§ñ <b>–°–æ–≤–µ—Ç—ã –æ—Ç AI:</b>\n{gpt_analysis_output}"

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è
        user_statistics.save_pronunciation_data(
            user_id=message.from_user.id,
            word=text_to_check,
            user_phonemes=user_phonemes,
            expected_phonemes=expected_phonemes,
            accuracy=overall_accuracy
        )

        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        log_user_result(
            user_id=str(message.from_user.id),
            result_type="pronunciation_check",
            result_data={
                "text": text_to_check,
                "accuracy": overall_accuracy,
                "verdict": verdict,
                "analysis": analysis_text,
                "gpt_analysis": gpt_analysis_output,
                "user_phonemes": user_phonemes
            }
        )

        # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –ø–æ–ø—ã—Ç–∫—É –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (lesson_id –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        user_statistics.add_pronunciation_attempt(
            user_id=message.from_user.id,
            word=text_to_check,
            score=overall_accuracy
        )

        await message.answer(
            full_response,
            reply_markup=get_keyboard_with_menu(get_pronunciation_result_keyboard()),
            parse_mode='HTML'
        )
        await state.set_state(LessonStates.PRONUNCIATION_LISTEN)

    await analyze_pronunciation(
        message=message,
        text_to_check=text_to_check,
        callback=handle_result,
        state=state
    )

async def analyze_pronunciation(
    message: Message,
    text_to_check: str,
    callback: Callable[[float, str, str, str, str, List[Dict]], Awaitable[None]],
    state: FSMContext
):
    """–û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è (–º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ —Ä–∞–∑–Ω—ã—Ö –±–ª–æ–∫–∞—Ö)"""
    processing_msg = await message.answer("üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–≤–æ—ë –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ...")

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ—Ä–æ–≥–æ–≤
    base_lower_threshold = 68.0
    base_upper_threshold = 84.0
    sensitivity_factor = -1.0
    num_words = len(text_to_check.split())

    adjusted_lower_threshold = base_lower_threshold
    adjusted_upper_threshold = base_upper_threshold

    if num_words <= 2:
        adjusted_lower_threshold += 3.0 * sensitivity_factor
    elif num_words >= 5:
        adjusted_lower_threshold += -3.0 * sensitivity_factor

    adjusted_lower_threshold = max(0.0, min(100.0, adjusted_lower_threshold))
    adjusted_upper_threshold = max(0.0, min(100.0, adjusted_upper_threshold))

    timestamp_str = datetime.now().strftime("%Y%m%d%H%M%S%f")
    voice_path_ogg = os.path.join("media", "audio", f"voice_{message.from_user.id}_{timestamp_str}.ogg")
    voice_path_wav = voice_path_ogg.replace(".ogg", ".wav")

    try:
        voice_file = await message.bot.get_file(message.voice.file_id)
        os.makedirs(os.path.dirname(voice_path_ogg), exist_ok=True)
        await message.bot.download_file(voice_file.file_path, voice_path_ogg)

        if not await convert_ogg_to_wav(voice_path_ogg, voice_path_wav):
            if processing_msg:
                try:
                    await processing_msg.delete()
                except TelegramBadRequest as e:
                    print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –Ω–µ—É–¥–∞—á–Ω–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}")
            await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∞—É–¥–∏–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return

        # ‚¨áÔ∏è –û—Å–Ω–æ–≤–Ω–æ–π –∞–Ω–∞–ª–∏–∑
        overall_accuracy, verdict, analysis_text, expected_phonemes, user_phonemes, word_results = await simple_pronunciation_check(
            text_to_check,
            voice_path_wav,
            adjusted_lower_threshold,
            adjusted_upper_threshold
        )

        # ‚¨áÔ∏è –í—ã–∑—ã–≤–∞–µ–º callback –¥–ª—è UI
        await callback(overall_accuracy, verdict, analysis_text, expected_phonemes, user_phonemes, word_results)

        # ‚¨áÔ∏è –ê—Ä—Ö–∏–≤–∞—Ü–∏—è –≥–æ–ª–æ—Å–∞
        save_dir = os.path.join("media", "archived_voices")
        os.makedirs(save_dir, exist_ok=True)
        unique_name = f"{message.from_user.id}_acc_{round(overall_accuracy)}_%_{_sanitize_filename(text_to_check)[:20]}.ogg" # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º _sanitize_filename
        shutil.copyfile(voice_path_ogg, os.path.join(save_dir, unique_name))

    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")
        print(f"–û—à–∏–±–∫–∞: {e}")

    finally:
        if voice_path_ogg and os.path.exists(voice_path_ogg):
            os.remove(voice_path_ogg)
        if voice_path_wav and os.path.exists(voice_path_wav):
            os.remove(voice_path_wav)

        if processing_msg:
            try:
                await processing_msg.delete()
            except TelegramBadRequest as e:
                print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –∞–Ω–∞–ª–∏–∑–µ: {e}")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –∞–Ω–∞–ª–∏–∑–µ (–Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è): {e}")


# --- start_pronunciation_block - –í–ï–†–ù–£–õ –ö –ò–°–•–û–î–ù–û–ú–£ –°–û–°–¢–û–Ø–ù–ò–Æ ---
# –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º user_statistics –∏ user_progress –≤ —Å–∏–≥–Ω–∞—Ç—É—Ä—É
async def start_pronunciation_block(user_id: int, message: Message, state: FSMContext, user_statistics: UserStatistics, user_progress: UserProgress):
    """–ù–∞—á–∞–ª–æ –±–ª–æ–∫–∞ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è"""
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è
    pronunciation_data = await load_json_data("2_pronouncing_words.json")
    print(f"DEBUG: pronunciation_data loaded: {pronunciation_data}")
    if not pronunciation_data or "words" not in pronunciation_data:
        await message.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è")
        return
    print(f"DEBUG: Number of words for pronunciation: {len(pronunciation_data['words'])}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(
        pronunciation_words=pronunciation_data["words"],
        current_pronunciation_word=0
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
    await message.answer(MESSAGES["pronunciation_intro"])

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è
    await show_pronunciation_word(user_id, message, state, user_statistics, user_progress) # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø–µ—Ä–µ–¥–∞–µ–º user_id

# --- –ö–û–ù–ï–¶ start_pronunciation_block ---


@router.callback_query(F.data == "start_pronunciation_lesson")
async def start_pronunciation_lesson_from_callback(callback: CallbackQuery, state: FSMContext, user_statistics: UserStatistics, user_progress: UserProgress): # user_id —É–±—Ä–∞–Ω –∏–∑ —Å–∏–≥–Ω–∞—Ç—É—Ä—ã, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ callback.from_user.id
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞—á–∞—Ç—å —É—Ä–æ–∫ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è".
    –í—ã–∑—ã–≤–∞–µ—Ç start_pronunciation_block –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ —Å—Ç–∞—Ä—Ç–∞.
    """
    await start_pronunciation_block(callback.from_user.id, callback.message, state, user_statistics, user_progress)
    await callback.answer()

def _sanitize_filename(text: str, max_length: int = 50) -> str:
    """
    –û—á–∏—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ —á–∞—Å—Ç–∏ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞.
    –£–¥–∞–ª—è–µ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –∏ –æ–±—Ä–µ–∑–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –¥–æ max_length.
    """
    sanitized = re.sub(r'[^\w\s-]', '', text).strip()
    sanitized = re.sub(r'\s+', '_', sanitized)
    sanitized = re.sub(r'__+', '_', sanitized)
    sanitized = sanitized.strip('_')
    return sanitized[:max_length]

async def show_pronunciation_word(user_id: int, message: Message, state: FSMContext, user_statistics: UserStatistics, user_progress: UserProgress): # –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω user_id
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è"""
    data = await state.get_data()
    words = data.get("pronunciation_words", [])
    current_index = data.get("current_pronunciation_word", 0)

    if current_index >= len(words):
        # –í—Å–µ —Å–ª–æ–≤–∞ –ø—Ä–æ–∏–∑–Ω–µ—Å–µ–Ω—ã
        await message.answer(
            MESSAGES["pronunciation_complete"],
            reply_markup=get_keyboard_with_menu(get_next_keyboard())
        )
        await state.set_state(LessonStates.PRONUNCIATION_COMPLETE)
        return

    current_word = words[current_index]

    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–ª–æ–≤–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ ---
    await state.update_data(
        current_pronunciation_word_data=current_word, # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–µ—Å—å —Å–ª–æ–≤–∞—Ä—å —Å–ª–æ–≤–∞ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        current_pronunciation_text=current_word['english'], # –û—Ç–¥–µ–ª—å–Ω–æ 'english' –¥–ª—è –ø—Ä—è–º–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        current_pronunciation_translation=current_word['russian'],
        current_pronunciation_transcription=current_word['transcription'],
        current_pronunciation_slow_mode=False # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–∂–∏–º –∑–∞–º–µ–¥–ª–µ–Ω–∏—è –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
    )
    # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø ---

    user_progress.update_progress(
        user_id, # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π user_id
        current_pronunciation_text=current_word['english'],
        current_pronunciation_slow_mode=False
    )

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–æ–≤–µ
    await message.answer(
        f"üìù **–°–ª–æ–≤–æ:** {current_word['english']}\n"
        f"üá∑üá∫ **–ü–µ—Ä–µ–≤–æ–¥:** {current_word['russian']}\n"
        f"üî§ **–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è:** {current_word['transcription']}",
        parse_mode="Markdown"
    )

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è (–≤—Å–µ–≥–¥–∞ –≤ –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –ø–æ–∫–∞–∑–µ)
    sanitized_english_word = _sanitize_filename(current_word['english'])
    audio_filename = f"pronunciation_{current_index}_{sanitized_english_word}"
    audio_path = await generate_audio(current_word['english'], audio_filename, 'en', slow_mode=False)

    if audio_path and os.path.exists(audio_path):
        try:
            audio = FSInputFile(audio_path)
            await message.answer_voice(
                voice=audio,
                caption="üîä **–ü–æ—Å–ª—É—à–∞–π –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ**",
                parse_mode="Markdown"
            )
            if os.path.exists(audio_path):
                 os.remove(audio_path)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ: {e}")
            await message.answer("üîä **–ü–æ—Å–ª—É—à–∞–π –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ:** (–∞—É–¥–∏–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)")
    else:
        await message.answer("üîä **–ü–æ—Å–ª—É—à–∞–π –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ:** (–∞—É–¥–∏–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)")

    # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –º–µ–Ω—é
    await message.answer(
        MESSAGES["pronunciation_instruction"],
        reply_markup=get_keyboard_with_menu(get_pronunciation_keyboard())
    )

    await state.set_state(LessonStates.PRONUNCIATION_LISTEN)


# --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: slow_down_pronunciation_handler –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –∏ –∑–∞–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ ---
@router.callback_query(
    F.data == "slow_down_pronunciation",
    LessonStates.PRONUNCIATION_LISTEN
)
@router.callback_query(F.data == "slow_down_pronunciation", LessonStates.PRONUNCIATION_RECORD)
async def slow_down_pronunciation_handler(callback: CallbackQuery, state: FSMContext, user_statistics: UserStatistics, user_progress: UserProgress):
    data = await state.get_data()
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ–∫—É—â–µ–º —Å–ª–æ–≤–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    text = data.get("current_pronunciation_text")
    translation = data.get("current_pronunciation_translation")
    transcription = data.get("current_pronunciation_transcription")

    if not text:
        await callback.answer("–ò–∑–≤–∏–Ω–∏, –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è.", show_alert=True)
        return

    # –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ —Å–µ–π—á–∞—Å slow mode
    await state.update_data(current_pronunciation_slow_mode=True)

    # 1) –ü–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç —Ñ—Ä–∞–∑—ã
    await callback.message.answer(
        f"üìù **–°–ª–æ–≤–æ:** {text}\n"
        f"üá∑üá∫ **–ü–µ—Ä–µ–≤–æ–¥:** {translation}\n"
        f"üî§ **–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è:** {transcription}",
        parse_mode="Markdown"
    )

    # 2) –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–º–µ–¥–ª–µ–Ω–Ω–æ–µ –∞—É–¥–∏–æ
    sanitized_text = _sanitize_filename(text)
    filename = f"slow_{callback.from_user.id}_{sanitized_text}_{datetime.now().strftime('%Y%m%d%H%M%S%f')}"
    audio_path = await generate_audio(text, filename, lang='en', slow_mode=True)
    if not audio_path or not os.path.exists(audio_path):
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–º–µ–¥–ª–µ–Ω–Ω–æ–µ –∞—É–¥–∏–æ.", show_alert=True)
        return

    await callback.message.answer_voice(
        voice=FSInputFile(audio_path),
        caption=f"üê¢ –ó–∞–º–µ–¥–ª–µ–Ω–Ω–æ–µ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ: **{text}**",
        parse_mode="Markdown"
    )
    os.remove(audio_path) # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª

    # 3) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await callback.message.answer(
        MESSAGES["pronunciation_instruction"],
        reply_markup=get_keyboard_with_menu(get_pronunciation_keyboard())
    )
    await callback.answer() # –ó–∞–∫—Ä—ã–≤–∞–µ–º "—á–∞—Å–∏–∫–∏" –Ω–∞ –∫–Ω–æ–ø–∫–µ
# --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø slow_down_pronunciation_handler ---


@router.callback_query(
    F.data == "repeat_pronunciation",
    LessonStates.PRONUNCIATION_LISTEN
)
@router.callback_query(F.data == "repeat_pronunciation", LessonStates.PRONUNCIATION_RECORD)
async def repeat_pronunciation_handler(callback: CallbackQuery, state: FSMContext, user_statistics: UserStatistics, user_progress: UserProgress):
    data = await state.get_data()

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º current_pronunciation_text –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    text = data.get("current_pronunciation_text")
    slow_mode = data.get("current_pronunciation_slow_mode", False)
    if not text:
        await callback.answer("–ò–∑–≤–∏–Ω–∏, –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è.", show_alert=True)
        return

    sanitized_text = _sanitize_filename(text)
    filename = f"rep_{callback.from_user.id}_{sanitized_text}_{datetime.now().strftime('%Y%m%d%H%M%S%f')}"
    audio_path = await generate_audio(text, filename, lang='en', slow_mode=slow_mode)
    if not audio_path or not os.path.exists(audio_path):
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ.", show_alert=True)
        return

    await callback.message.answer_voice(
        voice=FSInputFile(audio_path),
        caption=f"{'üê¢ ' if slow_mode else ''}–ü–æ–≤—Ç–æ—Ä—è—é: **{text}**",
        parse_mode="Markdown"
    )
    os.remove(audio_path)
    await callback.message.answer(
        MESSAGES["pronunciation_instruction"],
        reply_markup=get_keyboard_with_menu(get_pronunciation_keyboard())
    )
    await callback.answer()


@router.callback_query(F.data == "record_pronunciation", LessonStates.PRONUNCIATION_LISTEN)
async def request_pronunciation_recording(callback: CallbackQuery, state: FSMContext, user_statistics: UserStatistics, user_progress: UserProgress):
    """–ó–∞–ø—Ä–æ—Å –∑–∞–ø–∏—Å–∏ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è"""
    # –ó–¥–µ—Å—å edit_text —É–º–µ—Å—Ç–µ–Ω, —Ç–∞–∫ –∫–∞–∫ –º—ã –º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
    await callback.message.edit_text(
        "üé§  –ù–∞–∂–º–∏ –Ω–∞ –∑–Ω–∞—á–æ–∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –≤ –ø—Ä–∞–≤–æ–º –Ω–∏–∂–Ω–µ–º —É–≥–ª—É –≤ Telegram –∏ –ø—Ä–æ–∏–∑–Ω–µ—Å–∏ —Å–ª–æ–≤–æ",
        reply_markup=get_keyboard_with_menu(get_pronunciation_keyboard())
    )
    await state.set_state(LessonStates.PRONUNCIATION_RECORD)
    await callback.answer()


@router.callback_query(F.data == "skip_pronunciation", LessonStates.PRONUNCIATION_LISTEN)
@router.callback_query(F.data == "skip_pronunciation", LessonStates.PRONUNCIATION_RECORD)
@router.callback_query(F.data == "next_pronunciation")
async def next_pronunciation_word(callback: CallbackQuery, state: FSMContext, user_progress: UserProgress, user_statistics: UserStatistics):
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–ª–æ–≤—É –¥–ª—è –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è"""
    user_id = callback.from_user.id
    data = await state.get_data()
    words = data.get("pronunciation_words", []) # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤
    current_index = data.get("current_pronunciation_word", 0)

    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å
    await state.update_data(current_pronunciation_word=current_index + 1)

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_progress.update_progress(
        user_id,
        current_item=current_index + 1,
        current_pronunciation_slow_mode=False
    )

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ. user_progress —É–∂–µ –ø–µ—Ä–µ–¥–∞–Ω, –ø–µ—Ä–µ–¥–∞–µ–º user_statistics.
    await show_pronunciation_word(user_id, callback.message, state, user_statistics, user_progress) # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø–µ—Ä–µ–¥–∞–µ–º user_id
    await callback.answer()


@router.callback_query(F.data == "next", LessonStates.PRONUNCIATION_COMPLETE)
async def pronunciation_complete_next(callback: CallbackQuery, state: FSMContext, user_statistics: UserStatistics, user_progress: UserProgress):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –±–ª–æ–∫–∞ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –ª–µ–∫—Å–∏–∫–µ"""

    user_id = callback.from_user.id
    # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ä–µ–¥–Ω–µ–≥–æ –±–∞–ª–ª–∞ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è
    average_score = user_statistics.calculate_average_pronunciation_score_for_block(user_id, lesson_id=CURRENT_LESSON_ID)

    completion_message = (
        "üéâ –ë–ª–æ–∫ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
        f"üó£Ô∏è **–í–∞—à —Å—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è –ø–æ —ç—Ç–æ–º—É –±–ª–æ–∫—É:** {average_score:.1f}%\n\n"
        "–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ª–µ–∫—Å–∏—á–µ—Å–∫–∏–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º..."
    )

    await callback.message.edit_text(
        completion_message
    )

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    user_progress.update_progress(
        user_id,
        current_block="pronunciation",
        current_item=0
    )
    # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –±–ª–æ–∫–∞ –≤ user_statistics
    user_statistics.update_block_status(user_id, "pronunciation", completed=True, average_score=average_score, lesson_id=CURRENT_LESSON_ID)

    # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —É—Ä–æ–∫–∞ –∏ –æ—Ç–º–µ—á–∞–µ–º –µ–≥–æ, –µ—Å–ª–∏ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –±–ª–æ–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã
    # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É—Ä–æ–∫–∞ –Ω—É–∂–Ω—ã –±–ª–æ–∫–∏ "terms" –∏ "pronunciation".
    # –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –±–ª–æ–∫–∏, –¥–æ–±–∞–≤—å—Ç–µ –∏—Ö –≤ —ç—Ç—É –ø—Ä–æ–≤–µ—Ä–∫—É.
    if user_statistics.is_block_completed(user_id, "terms", lesson_id=CURRENT_LESSON_ID) and \
       user_statistics.is_block_completed(user_id, "pronunciation", lesson_id=CURRENT_LESSON_ID):
        user_statistics.mark_lesson_completed(user_id, lesson_id=CURRENT_LESSON_ID)
        print(f"DEBUG: –£—Ä–æ–∫ '{CURRENT_LESSON_ID}' –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")


    # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è start_lexical_en_to_ru_block —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç user_statistics –∏ user_progress
    try:
        from bot.handlers.lesson import start_lexical_en_to_ru_block # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç
        await start_lexical_en_to_ru_block(user_id, callback.message, state, user_statistics, user_progress)
    except NameError:
        await callback.message.answer("–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–µ–∫—Å–∏—á–µ—Å–∫–æ–≥–æ –±–ª–æ–∫–∞ (start_lexical_en_to_ru_block) –µ—â–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –∏–ª–∏ –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞.")
    await callback.answer()


#+++++++++++ –ù–ê–ß–ê–õ–û –õ–ï–ö–°–ò–ß–ï–°–ö–û–ì–û –ë–õ–û–ö–ê ++++++++++++++++++
async def start_lexical_en_to_ru_block(user_id: int, message: Message, state: FSMContext, user_statistics: UserStatistics, user_progress: UserProgress):
    """–ù–∞—á–∞–ª–æ –ª–µ–∫—Å–∏—á–µ—Å–∫–æ–≥–æ –±–ª–æ–∫–∞: –∞–Ω–≥–ª–∏–π—Å–∫–∏–π -> —Ä—É—Å—Å–∫–∏–π"""

    lexical_data = await load_json_data("translation_questions.json")
    if not lexical_data:
        await message.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–µ–∫—Å–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö")
        return

    questions = []
    for word, data in lexical_data.items():
        questions.append({
            "word": word,
            "correct": data["correct"],
            "options": data["options"]
        })

    await state.update_data(
        lexical_en_ru=questions,
        current_lexical_en=0,
        lexical_score_en_ru=0 # –û—Ç–¥–µ–ª—å–Ω—ã–π —Å—á–µ—Ç –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–¥–±–ª–æ–∫–∞
    )

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_progress.update_progress(user_id, current_block="lexical_en_to_ru", current_item=0)
    print(f"DEBUG: –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –±–ª–æ–∫–∞ lexical_en_to_ru.")

    await message.answer(MESSAGES["lexical_intro"])

    await show_lexical_en_question(user_id, message, state, user_statistics, user_progress)


async def show_lexical_en_question(user_id: int, message: Message, state: FSMContext, user_statistics: UserStatistics, user_progress: UserProgress):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π -> —Ä—É—Å—Å–∫–∏–π"""

    data = await state.get_data()
    questions = data.get("lexical_en_ru", [])
    current_index = data.get("current_lexical_en", 0)

    if current_index >= len(questions):
        score = data.get("lexical_score_en_ru", 0) # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å—á–µ—Ç
        total_questions = len(questions)
        score_percentage = (score / total_questions) * 100 if total_questions > 0 else 0

        await message.answer(
            f"{MESSAGES['lexical_en_ru_complete']}\n\n"
            f"–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score}/{total_questions} ( {score_percentage:.1f}%) ‚ú®",
            reply_markup=get_keyboard_with_menu(get_next_keyboard())
        )
        await state.set_state(LessonStates.LEXICAL_EN_COMPLETE)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–±–ª–æ–∫–∞ –≤ UserStatistics
        user_statistics.update_block_status(user_id, "lexical_en_to_ru", completed=True, average_score=score_percentage, lesson_id=CURRENT_LESSON_ID)
        print(f"DEBUG: –°—Ç–∞—Ç—É—Å –ø–æ–¥–±–ª–æ–∫–∞ lexical_en_to_ru –æ–±–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")

        return

    current_question = questions[current_index]

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
    user_progress.update_progress(user_id, current_block="lexical_en_to_ru", current_item=current_index + 1)

    question_text = f"üìù **–ü–µ—Ä–µ–≤–µ–¥–∏ —Å–ª–æ–≤–æ ({current_index + 1}/{len(questions)}):**\n\n**{current_question['word']}**"

    await message.answer(
        question_text,
        parse_mode="Markdown",
        reply_markup=get_keyboard_with_menu(get_choice_keyboard(current_question['options'], f"en_{current_index}")) # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "en_"
    )

    await state.set_state(LessonStates.LEXICAL_EN_TO_RU)


@router.callback_query(F.data.startswith("lexical_en_"), LessonStates.LEXICAL_EN_TO_RU) # –û–±–Ω–æ–≤–ª–µ–Ω –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
async def process_lexical_en_answer(callback: CallbackQuery, state: FSMContext, user_statistics: UserStatistics, user_progress: UserProgress):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π -> —Ä—É—Å—Å–∫–∏–π"""
    user_id = callback.from_user.id
    data = await state.get_data()
    questions = data.get("lexical_en_ru", [])
    current_index = data.get("current_lexical_en", 0)
    score = data.get("lexical_score_en_ru", 0) # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å—á–µ—Ç

    if current_index >= len(questions):
        return

    current_question = questions[current_index]

    callback_parts = callback.data.split("_")
    # selected_answer = "_".join(callback_parts[2:]) # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–∏–∂–Ω–µ–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ
    selected_answer = callback_parts[-1] # –¢–µ–ø–µ—Ä—å –ø—Ä–æ—Å—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç

    correct_answer = current_question["correct"]
    is_correct = False

    if selected_answer == correct_answer:
        response_text = MESSAGES["correct_answer"]
        score += 1
        is_correct = True
        await state.update_data(lexical_score_en_ru=score)
    else:
        response_text = f"‚ùå –£–ø—Å, –æ—à–∏–±–∫–∞!\n–¢–≤–æ–π –æ—Ç–≤–µ—Ç: {selected_answer}\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}"
        is_correct = False

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ø—ã—Ç–∫—É –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    user_statistics.add_lexical_attempt(user_id, "en_to_ru", current_question['word'], is_correct, CURRENT_LESSON_ID, selected_answer)

    await callback.message.edit_text(
        f"**{current_question['word']}**\n\n{response_text}",
        parse_mode="Markdown",
        reply_markup=get_keyboard_with_menu(get_continue_keyboard())
    )
    await callback.answer()


@router.callback_query(F.data == "continue_exercise", LessonStates.LEXICAL_EN_TO_RU)
async def continue_lexical_en_to_ru(callback: CallbackQuery, state: FSMContext, user_statistics: UserStatistics, user_progress: UserProgress):
    """–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ª–µ–∫—Å–∏—á–µ—Å–∫–∏–π –±–ª–æ–∫ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π -> —Ä—É—Å—Å–∫–∏–π"""
    user_id = callback.from_user.id

    print("[DEBUG] –ó–∞–ø—É—â–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ continue_lexical_en_to_ru")
    data = await state.get_data()
    print("[DEBUG] –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ state:", data)
    current_index = data.get("current_lexical_en", 0)
    print(f"[DEBUG] –¢–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –≤–æ–ø—Ä–æ—Å–∞: {current_index}")
    new_index = current_index + 1
    await state.update_data(current_lexical_en=new_index)
    print(f"[DEBUG] –ò–Ω–¥–µ–∫—Å —É–≤–µ–ª–∏—á–µ–Ω. –ù–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å: {new_index}")

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    user_progress.update_progress(user_id, current_block="lexical_en_to_ru", current_item=new_index + 1)

    try:
        await show_lexical_en_question(user_id, callback.message, state, user_statistics, user_progress)
        print("[DEBUG] –§—É–Ω–∫—Ü–∏—è show_lexical_en_question —É—Å–ø–µ—à–Ω–æ –≤—ã–∑–≤–∞–Ω–∞")
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ show_lexical_en_question: {e}")

    await callback.answer()


@router.callback_query(F.data == "next", LessonStates.LEXICAL_EN_COMPLETE)
async def lexical_en_complete_next(callback: CallbackQuery, state: FSMContext, user_statistics: UserStatistics, user_progress: UserProgress):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –±–ª–æ–∫–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π -> —Ä—É—Å—Å–∫–∏–π, –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Ä—É—Å—Å–∫–∏–π -> –∞–Ω–≥–ª–∏–π—Å–∫–∏–π"""
    user_id = callback.from_user.id
    await callback.message.edit_text(
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –ø–æ–ø—Ä–æ–±—É–µ–º –≤ –æ–±—Ä–∞—Ç–Ω—É—é —Å—Ç–æ—Ä–æ–Ω—É..."
    )

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø–æ–¥–±–ª–æ–∫—É
    user_progress.update_progress(user_id, current_block="lexical_ru_to_en", current_item=0)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–ª–æ–∫ —Ä—É—Å—Å–∫–∏–π -> –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
    await start_lexical_ru_to_en_block(user_id, callback.message, state, user_statistics, user_progress)
    await callback.answer()

async def start_lexical_ru_to_en_block(user_id: int, message: Message, state: FSMContext, user_statistics: UserStatistics, user_progress: UserProgress):
    """–ù–∞—á–∞–ª–æ –ª–µ–∫—Å–∏—á–µ—Å–∫–æ–≥–æ –±–ª–æ–∫–∞: —Ä—É—Å—Å–∫–∏–π -> –∞–Ω–≥–ª–∏–π—Å–∫–∏–π"""

    lexical_data = await load_json_data("translation_questions_russian.json")
    if not lexical_data:
        await message.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–µ–∫—Å–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö (—Ä—É—Å—Å–∫–∏–π)")
        return

    questions = []
    for word, data in lexical_data.items():
        questions.append({
            "word": word,
            "correct": data["correct"],
            "options": data["options"]
        })

    await state.update_data(
        lexical_ru_en=questions,
        current_lexical_ru=0,
        lexical_score_ru_en=0 # –û—Ç–¥–µ–ª—å–Ω—ã–π —Å—á–µ—Ç –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–¥–±–ª–æ–∫–∞
    )

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_progress.update_progress(user_id, current_block="lexical_ru_to_en", current_item=0)
    print(f"DEBUG: –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –±–ª–æ–∫–∞ lexical_ru_to_en.")

    await message.answer(MESSAGES["lexical_intro"])

    await show_lexical_ru_question(user_id, message, state, user_statistics, user_progress)


async def show_lexical_ru_question(user_id: int, message: Message, state: FSMContext, user_statistics: UserStatistics, user_progress: UserProgress):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Ä—É—Å—Å–∫–∏–π -> –∞–Ω–≥–ª–∏–π—Å–∫–∏–π"""

    data = await state.get_data()
    questions = data.get("lexical_ru_en", [])
    current_index = data.get("current_lexical_ru", 0)

    if current_index >= len(questions):
        score = data.get("lexical_score_ru_en", 0) # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å—á–µ—Ç
        total_questions = len(questions)
        score_percentage = (score / total_questions) * 100 if total_questions > 0 else 0

        await message.answer(
            f"{MESSAGES['lexical_ru_en_complete']}\n\n"
            f"–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score}/{total_questions} ( {score_percentage:.1f}%) ‚ú®",
            reply_markup=get_keyboard_with_menu(get_next_keyboard())
        )
        await state.set_state(LessonStates.LEXICAL_RU_COMPLETE)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–±–ª–æ–∫–∞ –≤ UserStatistics
        user_statistics.update_block_status(user_id, "lexical_ru_to_en", completed=True, average_score=score_percentage, lesson_id=CURRENT_LESSON_ID)
        print(f"DEBUG: –°—Ç–∞—Ç—É—Å –ø–æ–¥–±–ª–æ–∫–∞ lexical_ru_to_en –æ–±–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")

        return

    current_question = questions[current_index]

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
    user_progress.update_progress(user_id, current_block="lexical_ru_to_en", current_item=current_index + 1)

    question_text = f"üìù **–ü–µ—Ä–µ–≤–µ–¥–∏ —Å–ª–æ–≤–æ ({current_index + 1}/{len(questions)}):**\n\n**{current_question['word']}**"

    await message.answer(
        question_text,
        parse_mode="Markdown",
        reply_markup=get_keyboard_with_menu(get_choice_keyboard(current_question['options'], f"ru_{current_index}")) # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "ru_"
    )

    await state.set_state(LessonStates.LEXICAL_RU_TO_EN)


@router.callback_query(F.data.startswith("lexical_ru_"), LessonStates.LEXICAL_RU_TO_EN)
async def process_lexical_ru_answer(callback: CallbackQuery, state: FSMContext, user_statistics: UserStatistics, user_progress: UserProgress):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ä—É—Å—Å–∫–∏–π -> –∞–Ω–≥–ª–∏–π—Å–∫–∏–π"""
    user_id = callback.from_user.id
    data = await state.get_data()
    questions = data.get("lexical_ru_en", [])
    current_index = data.get("current_lexical_ru", 0)
    score = data.get("lexical_score_ru_en", 0) # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å—á–µ—Ç

    if current_index >= len(questions):
        return

    current_question = questions[current_index]

    callback_parts = callback.data.split("_")
    selected_answer = callback_parts[-1]

    correct_answer = current_question["correct"]
    is_correct = False

    if selected_answer == correct_answer:
        response_text = MESSAGES["correct_answer"]
        score += 1
        is_correct = True
        await state.update_data(lexical_score_ru_en=score) # <-- –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò–∑–º–µ–Ω–µ–Ω–æ —Å lexical_ru_score –Ω–∞ lexical_score_ru_en
    else:
        response_text = f"‚ùå –£–ø—Å, –æ—à–∏–±–∫–∞!\n–¢–≤–æ–π –æ—Ç–≤–µ—Ç: {selected_answer}\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}"
        is_correct = False

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ø—ã—Ç–∫—É –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    user_statistics.add_lexical_attempt(user_id, "ru_to_en", current_question['word'], is_correct, CURRENT_LESSON_ID, selected_answer)

    await callback.message.edit_text(
        f"**{current_question['word']}**\n\n{response_text}",
        parse_mode="Markdown",
        reply_markup=get_keyboard_with_menu(get_continue_keyboard())
    )
    await callback.answer()


@router.callback_query(F.data == "continue_exercise", LessonStates.LEXICAL_RU_TO_EN)
async def continue_lexical_ru_to_en(callback: CallbackQuery, state: FSMContext, user_statistics: UserStatistics, user_progress: UserProgress):
    """–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä—É—Å—Å–∫–∏–π -> –∞–Ω–≥–ª–∏–π—Å–∫–∏–π"""
    user_id = callback.from_user.id
    data = await state.get_data()
    current_index = data.get("current_lexical_ru", 0)
    new_index = current_index + 1
    await state.update_data(current_lexical_ru=new_index)

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    user_progress.update_progress(user_id, current_block="lexical_ru_to_en", current_item=new_index + 1)

    await show_lexical_ru_question(user_id, callback.message, state, user_statistics, user_progress)
    await callback.answer()


@router.callback_query(F.data == "next", LessonStates.LEXICAL_RU_COMPLETE)
async def lexical_complete_next(callback: CallbackQuery, state: FSMContext, user_progress: UserProgress,
                                user_statistics: UserStatistics):
    """
    –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –±–ª–æ–∫–∞ —Ä—É—Å—Å–∫–∏–π -> –∞–Ω–≥–ª–∏–π—Å–∫–∏–π, –ø–µ—Ä–µ—Ö–æ–¥ –∫ –±–ª–æ–∫—É —Å–±–æ—Ä–∫–∏ —Å–ª–æ–≤ (word_build).
    –í–ê–ñ–ù–û: –û–±—â–∏–π –ª–µ–∫—Å–∏—á–µ—Å–∫–∏–π –±–ª–æ–∫ –±—É–¥–µ—Ç –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –ø–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è word_build.
    """
    user_id = callback.from_user.id
    lesson_id = CURRENT_LESSON_ID

    # 1. –û—Ç–º–µ—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø–æ–¥–±–ª–æ–∫ lexical_ru_to_en –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π (–µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ —Ä–∞–Ω–µ–µ)
    # –≠—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã–ª–æ –ø—Ä–æ–∏–∑–æ–π—Ç–∏ –≤ show_lexical_ru_question, –Ω–æ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –æ—Å—Ç–∞–≤–∏–º –∑–¥–µ—Å—å.
    user_statistics.update_block_status(user_id, "lexical_ru_to_en", completed=True, lesson_id=lesson_id)
    print(f"DEBUG: –ü–æ–¥–±–ª–æ–∫ lexical_ru_to_en –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")


    await callback.message.edit_text(
        "üéâ –õ–µ–∫—Å–∏—á–µ—Å–∫–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è (–ø–µ—Ä–µ–≤–æ–¥) –∑–∞–≤–µ—Ä—à–µ–Ω—ã!\n\n" # –û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        "–¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ **–°–±–æ—Ä–∫–µ —Å–ª–æ–≤**."
    )

    # 2. –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –Ω–æ–≤–æ–º—É –ø–æ–¥–±–ª–æ–∫—É word_build
    user_progress.update_progress(
        user_id,
        current_block="lexical_word_build", # –£–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–æ–¥–±–ª–æ–∫
        current_item=0
    )
    print(f"DEBUG: –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –±–ª–æ–∫–∞ lexical_word_build.")

    # 3. –ó–∞–ø—É—Å–∫–∞–µ–º –±–ª–æ–∫ —Å–±–æ—Ä–∫–∏ —Å–ª–æ–≤
    try:
        # –¢–µ–ø–µ—Ä—å start_word_build –ø—Ä–∏–Ω–∏–º–∞–µ—Ç callback, state, user_statistics, user_progress
        await start_word_build(callback, state, user_statistics, user_progress)
        print(f"DEBUG: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–µ—Ä–µ—à–µ–ª –∫ –±–ª–æ–∫—É Word Build.")

    except NameError:
        await callback.message.answer(
            "–§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–ª–æ–∫–∞ '–°–æ–±–µ—Ä–∏ —Å–ª–æ–≤–æ' (start_word_build) –µ—â–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –∏–ª–∏ –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞.")

    await callback.answer()

# --- –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ: –°–±–æ—Ä–∫–∞ —Å–ª–æ–≤–∞ –∏–∑ —á–∞—Å—Ç–µ–π (Word Build) ---

async def start_word_build(callback: CallbackQuery, state: FSMContext, user_statistics: UserStatistics, user_progress: UserProgress):
    """–ù–∞—á–∞–ª–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–∞ —Å–±–æ—Ä–∫—É —Å–ª–æ–≤"""
    user_id = callback.from_user.id # –ü–æ–ª—É—á–∞–µ–º user_id –Ω–∞–ø—Ä—è–º—É—é
    lesson_id = CURRENT_LESSON_ID

    data = await load_json_data("word_build.json")
    if not data:
        await callback.message.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–±–æ—Ä–∫–∏ —Å–ª–æ–≤.")
        return

    words = list(data.keys())
    await state.update_data(
        word_build_data=data,
        word_build_words=words,
        current_word_index=0,
        word_build_collected="",
        word_build_score=0
    )

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –ø–æ–¥–±–ª–æ–∫–∞ 'lexical_word_build'
    user_statistics.init_lesson_block_data(user_id, lesson_id, 'lexical', 'word_build')
    user_progress.update_progress(user_id, current_block="lexical_word_build", current_item=0) # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    print(f"DEBUG: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª –±–ª–æ–∫ Word Build.")

    await show_word_build_exercise(user_id, callback.message, state, user_statistics, user_progress) # –ü–µ—Ä–µ–¥–∞–µ–º user_id
    await callback.answer()


async def show_word_build_exercise(user_id: int, message: Message, state: FSMContext, user_statistics: UserStatistics, user_progress: UserProgress): # –î–æ–±–∞–≤–ª–µ–Ω—ã user_id, user_statistics, user_progress
    data = await state.get_data()
    words = data.get("word_build_words", [])
    index = data.get("current_word_index", 0)
    all_data = data.get("word_build_data", {})

    if index >= len(words):
        await finish_word_build(user_id, message, state, user_statistics, user_progress) # –ü–µ—Ä–µ–¥–∞–µ–º user_id
        return

    word = words[index]
    parts = all_data[word]["scrambled_parts"]
    collected = data.get("word_build_collected", "")

    placeholder = " ".join(["_" * len(part) for part in all_data[word]["parts"]])
    user_input = " + ".join(collected.split("+")) if collected else ""

    text = (
        f"üî§ –°–æ–±–µ—Ä–∏ —Å–ª–æ–≤–æ –∏–∑ —á–∞—Å—Ç–µ–π ({index + 1}/{len(words)}):\n\n" # –î–æ–±–∞–≤–∏–ª —Å—á–µ—Ç—á–∏–∫
        f"{placeholder}\n\n"
        f"–¢—ã —Å–æ–±—Ä–∞–ª: {user_input or '–Ω–∏—á–µ–≥–æ'}\n\n"
        f"–í—ã–±–µ—Ä–∏ —á–∞—Å—Ç–∏:"
    )

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
    user_progress.update_progress(user_id, current_block="lexical_word_build", current_item=index + 1)

    await message.edit_text(text, reply_markup=get_word_build_keyboard(parts, collected))
    await state.set_state(LessonStates.LEXICAL_WORD_BUILD)
    print(f"DEBUG: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ª–æ–≤–æ –¥–ª—è —Å–±–æ—Ä–∫–∏: {word} (–∏–Ω–¥–µ–∫—Å {index}).")


async def finish_word_build(user_id: int, message: Message, state: FSMContext, user_statistics: UserStatistics, user_progress: UserProgress):
    print(f"DEBUG: –ù–∞—á–∞–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏ finish_word_build –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
    lesson_id = CURRENT_LESSON_ID
    data = await state.get_data()
    words = data.get("word_build_words", [])
    total = len(words)
    score = data.get("word_build_score", 0)

    print(f"DEBUG: finish_word_build: total_words={total}, score={score}.")

    try:
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –ø–æ–¥–±–ª–æ–∫–∞ "lexical_word_build"
        user_statistics.update_block_score(user_id, lesson_id, 'lexical', 'word_build', score, total)
        user_statistics.mark_block_completed(user_id, lesson_id, 'lexical', 'word_build', True)
        print(f"DEBUG: –ü–æ–¥–±–ª–æ–∫ lexical_word_build –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}. –°—á–µ—Ç: {score}/{total}.")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ—Ç–º–µ—á–∞–µ–º –≤–µ—Å—å —É—Ä–æ–∫ –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π, –µ—Å–ª–∏ —ç—Ç–æ –ø—Ä–∏–º–µ–Ω–∏–º–æ
        user_statistics._check_and_mark_lesson_completed(user_id, lesson_id)
        print(f"DEBUG: finish_word_build: –ü—Ä–æ–≤–µ—Ä–µ–Ω–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Ä–æ–∫–∞. (–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ _check_and_mark_lesson_completed)") # –ù–û–í–û–ï –æ—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

        user_progress.clear_current_block_data(user_id) # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –±–ª–æ–∫–∞
        print(f"DEBUG: finish_word_build: –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—á–∏—â–µ–Ω.")

        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º overall_lexical_score –¥–ª—è –≤—ã–≤–æ–¥–∞
        overall_lexical_score_for_display = user_statistics.get_overall_lexical_score(user_id, lesson_id=lesson_id)
        print(f"DEBUG: finish_word_build: –û–±—â–∏–π –±–∞–ª–ª –ø–æ –ª–µ–∫—Å–∏–∫–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è: {overall_lexical_score_for_display:.1f}%")

        result_text = (
            f"üéâ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ **–°–æ–±–µ—Ä–∏ —Å–ª–æ–≤–æ** –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n"
            f"–í—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å–æ–±—Ä–∞–ª–∏ {score} –∏–∑ {total} —Å–ª–æ–≤.\n\n"
            f"–í–∞—à –æ–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ –ª–µ–∫—Å–∏–∫–µ: {overall_lexical_score_for_display:.1f}%"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        print(f"DEBUG: finish_word_build: –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏.")
        await message.answer(result_text, parse_mode="Markdown") # –î–æ–±–∞–≤–∏–ª parse_mode="Markdown"
        print(f"DEBUG: finish_word_build: –°–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")

        # –°—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –±–ª–æ–∫—É: –ì—Ä–∞–º–º–∞—Ç–∏–∫–∞
        from bot.handlers.lesson import start_grammar_block # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏–º–ø–æ—Ä—Ç –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω
        print(f"DEBUG: finish_word_build: –ü–æ–ø—ã—Ç–∫–∞ –≤—ã–∑–≤–∞—Ç—å start_grammar_block.")
        await start_grammar_block(user_id, message, state, user_statistics, user_progress)
        print(f"DEBUG: finish_word_build: –í—ã–∑–≤–∞–Ω–∞ start_grammar_block –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")

        print(f"DEBUG: finish_word_build: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ö–æ–¥ –∫ –ì—Ä–∞–º–º–∞—Ç–∏–∫–µ.")

    except Exception as e:
        print(f"ERROR: –û—à–∏–±–∫–∞ –≤ finish_word_build –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        traceback.print_exc() # –í—ã–≤–æ–¥–∏–º –ø–æ–ª–Ω—ã–π traceback –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
        # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await state.clear()
        # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ get_keyboard_with_menu –∏ get_main_menu_keyboard –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã
        from bot.keyboards import get_keyboard_with_menu, get_main_menu_keyboard
        await message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_keyboard_with_menu(get_main_menu_keyboard()))


@router.callback_query(F.data.startswith("wb_part_"), LessonStates.LEXICAL_WORD_BUILD)
async def handle_word_part(callback: CallbackQuery, state: FSMContext, user_statistics: UserStatistics, user_progress: UserProgress):
    user_id = callback.from_user.id
    part = callback.data.replace("wb_part_", "")
    data = await state.get_data()
    collected = data.get("word_build_collected", "")
    collected += "+" + part if collected else part
    await state.update_data(word_build_collected=collected)
    await show_word_build_exercise(user_id, callback.message, state, user_statistics, user_progress) # –ü–µ—Ä–µ–¥–∞–µ–º user_id
    await callback.answer()


@router.callback_query(F.data == "wb_check", LessonStates.LEXICAL_WORD_BUILD)
async def check_word_build(callback: CallbackQuery, state: FSMContext, user_statistics: UserStatistics, user_progress: UserProgress):
    user_id = callback.from_user.id
    data = await state.get_data()
    words = data.get("word_build_words", [])
    index = data.get("current_word_index", 0)
    all_data = data.get("word_build_data", {})
    collected = data.get("word_build_collected", "")

    word = words[index]
    correct_parts = all_data[word]["parts"]
    user_parts = collected.split("+")

    is_correct = (user_parts == correct_parts) # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞

    if is_correct:
        score = data.get("word_build_score", 0) + 1
        await state.update_data(word_build_score=score)

        await callback.message.edit_text(
            f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!\n\n"
            f"–í—ã —Å–æ–±—Ä–∞–ª–∏: {' + '.join(correct_parts)}\n\n"
            f"–ù–∞–∂–º–∏ ¬´‚û°Ô∏è –î–∞–ª–µ–µ¬ª, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚û°Ô∏è –î–∞–ª–µ–µ", callback_data="wb_next")]
            ])
        )
    else:
        correct = " + ".join(correct_parts)
        await callback.message.edit_text(
            f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ.\n–¢–≤–æ–π –æ—Ç–≤–µ—Ç: {' + '.join(user_parts)}\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct}\n\n"
            f"–ù–∞–∂–º–∏ ¬´‚û°Ô∏è –î–∞–ª–µ–µ¬ª.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚û°Ô∏è –î–∞–ª–µ–µ", callback_data="wb_next")]
            ])
        )
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ø—ã—Ç–∫—É –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∫–∞–∂–¥—É—é –ø–æ–ø—ã—Ç–∫—É)
    # user_statistics.add_lexical_attempt(user_id, "word_build", word, is_correct, CURRENT_LESSON_ID)
    await callback.answer()


@router.callback_query(F.data == "wb_next", LessonStates.LEXICAL_WORD_BUILD)
async def next_word_after_check(callback: CallbackQuery, state: FSMContext, user_statistics: UserStatistics, user_progress: UserProgress):
    user_id = callback.from_user.id
    print(f"DEBUG: next_word_after_check: Callback 'wb_next' –ø–æ–ª—É—á–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ {await state.get_state()}.")

    data = await state.get_data()
    current_index = data.get("current_word_index", 0)
    words = data.get("word_build_words", [])
    total_words = len(words)

    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è –°–õ–ï–î–£–Æ–©–ï–ì–û —Å–ª–æ–≤–∞
    new_index = current_index + 1

    await state.update_data(
        current_word_index=new_index,
        word_build_collected=""
    )
    print(f"DEBUG: next_word_after_check: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}, —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å={current_index}, –Ω–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å={new_index}, –≤—Å–µ–≥–æ —Å–ª–æ–≤={total_words}.")

    if new_index >= total_words:
        # –í—Å–µ —Å–ª–æ–≤–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã (–∏–ª–∏ –ø—Ä–æ–ø—É—â–µ–Ω—ã), –∑–∞–≤–µ—Ä—à–∞–µ–º –±–ª–æ–∫
        print(f"DEBUG: next_word_after_check: –í—Å–µ —Å–ª–æ–≤–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã. –í—ã–∑–æ–≤ finish_word_build –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
        await finish_word_build(user_id, callback.message, state, user_statistics, user_progress)
    else:
        # –ï—Å—Ç—å –µ—â–µ —Å–ª–æ–≤–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ
        print(f"DEBUG: next_word_after_check: –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–ª–æ–≤–∞ (–∏–Ω–¥–µ–∫—Å {new_index}) –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
        await show_word_build_exercise(user_id, callback.message, state, user_statistics, user_progress)

    await callback.answer() # –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback-–∑–∞–ø—Ä–æ—Å


@router.callback_query(F.data == "wb_skip", LessonStates.LEXICAL_WORD_BUILD)
async def skip_word_build(callback: CallbackQuery, state: FSMContext, user_statistics: UserStatistics, user_progress: UserProgress):
    user_id = callback.from_user.id
    data = await state.get_data()
    index = data.get("current_word_index", 0)

    await state.update_data(
        current_word_index=index + 1,
        word_build_collected=""
    )

    await show_word_build_exercise(user_id, callback.message, state, user_statistics, user_progress) # –ü–µ—Ä–µ–¥–∞–µ–º user_id
    await callback.answer()


@router.callback_query(F.data == "next", LessonStates.LEXICAL_WORD_COMPLETE)
async def word_build_complete_next(callback: CallbackQuery, state: FSMContext, user_statistics: UserStatistics, user_progress: UserProgress):
    user_id = callback.from_user.id
    lesson_id = CURRENT_LESSON_ID

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–µ –º–µ–Ω—è–µ–º —Å—Ç–∞—Ä–æ–µ!)
    await callback.message.answer("üéâ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!\n"
                                  "–ë–ª–æ–∫ **–°–±–æ—Ä–∫–∞ —Å–ª–æ–≤** –∑–∞–≤–µ—Ä—à–µ–Ω.\n\n"
                                  "–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É: **–ì—Ä–∞–º–º–∞—Ç–∏–∫–∞**.")

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≥—Ä–∞–º–º–∞—Ç–∏–∫–µ
    from bot.handlers.lesson import start_grammar_block # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ start_grammar_block –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –∑–¥–µ—Å—å
    await start_grammar_block(user_id, callback.message, state, user_statistics, user_progress) # –ü–µ—Ä–µ–¥–∞–µ–º user_id

    await callback.answer()

# --- –ö–æ–Ω–µ—Ü —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è: –°–±–æ—Ä–∫–∞ —Å–ª–æ–≤–∞ ---
async def start_grammar_block(user_id: int, message: Message, state: FSMContext, user_statistics: UserStatistics, user_progress: UserProgress):
    """–ù–∞—á–∞–ª–æ –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –±–ª–æ–∫–∞"""
    print(f"DEBUG: –ù–∞—á–∞–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏ start_grammar_block –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.") # –î–æ–±–∞–≤–ª–µ–Ω–æ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    lesson_id = CURRENT_LESSON_ID

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –±–ª–æ–∫–∞ 'grammar'
    user_statistics.init_lesson_block_data(user_id, lesson_id, 'grammar', None) # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫ 'grammar'
    user_progress.update_progress(user_id, current_block="grammar", current_item=0) # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    print(f"DEBUG: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª –±–ª–æ–∫ –ì—Ä–∞–º–º–∞—Ç–∏–∫–∞.")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
    await message.answer(MESSAGES["grammar_intro"])

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∞–≤–∏–ª–æ
    grammar_data = await load_json_data("present_simple.json")
    if not grammar_data or "rule" not in grammar_data:
        await message.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–∞–≤–∏–ª")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(grammar_rule=grammar_data["rule"])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª–æ
    await message.answer(
        f"üìö **–ì—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∞–≤–∏–ª–æ:**\n\n{grammar_data['rule']}",
        parse_mode="Markdown"
    )

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —Å –º–µ–Ω—é
    await message.answer(
        "–ö–∞–∫ –¥–µ–ª–∞ —Å –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º?",
        reply_markup=get_keyboard_with_menu(get_grammar_keyboard())
    )

    await state.set_state(LessonStates.GRAMMAR_CHOICE)
    print(f"DEBUG: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–µ—Ä–µ—à–µ–ª –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ GRAMMAR_CHOICE.")


@router.callback_query(F.data == "grammar_understood", LessonStates.GRAMMAR_CHOICE)
async def grammar_understood(callback: CallbackQuery, state: FSMContext, user_statistics: UserStatistics,
                             user_progress: UserProgress):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–Ω—è–ª –≥—Ä–∞–º–º–∞—Ç–∏–∫—É"""
    await callback.answer()
    user_id = callback.from_user.id
    lesson_id = CURRENT_LESSON_ID

    try:
        user_statistics.mark_block_completed(user_id, lesson_id, "grammar", completed=True)
        print(f"DEBUG: –ë–ª–æ–∫ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")

        print(f"DEBUG: –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –æ—Ç–º–µ—Ç–∏—Ç—å —É—Ä–æ–∫ –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
        user_statistics._check_and_mark_lesson_completed(user_id, lesson_id)

        print(
            f"DEBUG: –í—ã–∑–æ–≤ user_statistics.save_data() –∏–∑ grammar_understood –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")  # –ù–û–í–û–ï –û–¢–õ–ê–î–û–ß–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï
        user_statistics.save_data()
        print(
            f"DEBUG: –î–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ø–æ—Å–ª–µ grammar_understood –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")  # –ù–û–í–û–ï –û–¢–õ–ê–î–û–ß–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï
    except Exception as stat_e:
        print(f"ERROR: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –≤ grammar_understood –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {stat_e}")
        print(traceback.format_exc())

    print(f"DEBUG: –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ grammar_understood –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (–ø–µ—Ä–µ–¥ edit_text).")
    try:
        await callback.message.edit_text(
            "üéâ –û—Ç–ª–∏—á–Ω–æ! –í—ã –ø–æ–Ω—è–ª–∏ –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∞–≤–∏–ª–æ!\n\n"
            "–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –±–ª–æ–∫—É...",
            reply_markup=get_keyboard_with_menu(get_next_keyboard())
        )
        print(f"DEBUG: –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
    except Exception as e:
        print(f"ERROR: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ grammar_understood –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        print(traceback.format_exc())
        await callback.message.answer(
            "üéâ –û—Ç–ª–∏—á–Ω–æ! –í—ã –ø–æ–Ω—è–ª–∏ –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∞–≤–∏–ª–æ!\n\n"
            "–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –±–ª–æ–∫—É...",
            reply_markup=get_keyboard_with_menu(get_next_keyboard())
        )
    finally:
        print(f"DEBUG: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ grammar_understood –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (–ø–æ—Å–ª–µ try-except).")

    await state.set_state(LessonStates.GRAMMAR_COMPLETE)
    user_progress.clear_current_block_data(user_id)
    print(f"DEBUG: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–µ—Ä–µ—à–µ–ª –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ GRAMMAR_COMPLETE.")


@router.callback_query(F.data == "grammar_questions", LessonStates.GRAMMAR_CHOICE)
async def grammar_questions(callback: CallbackQuery, state: FSMContext, user_statistics: UserStatistics, user_progress: UserProgress):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã"""
    user_id = callback.from_user.id
    await callback.message.edit_text(
        MESSAGES["grammar_ask_question"],
        reply_markup=get_keyboard_with_menu(get_grammar_qa_keyboard())
    )

    await state.set_state(LessonStates.GRAMMAR_QA)
    print(f"DEBUG: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–µ—Ä–µ—à–µ–ª –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ GRAMMAR_QA.")
    await callback.answer()


@router.message(F.text, LessonStates.GRAMMAR_QA)
async def process_grammar_question(message: Message, state: FSMContext, user_statistics: UserStatistics, user_progress: UserProgress):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ –≥—Ä–∞–º–º–∞—Ç–∏–∫–µ"""
    user_id = message.from_user.id
    user_question = message.text

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å
    thinking_msg = await message.answer(MESSAGES["teacher_thinking"])

    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç AI –∞–≥–µ–Ω—Ç–∞-—É—á–∏—Ç–µ–ª—è
        teacher_response = await get_teacher_response(user_question)

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–¥—É–º–∞—é"
        await thinking_msg.delete()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —É—á–∏—Ç–µ–ª—è
        await message.answer(
            teacher_response,
            reply_markup=get_keyboard_with_menu(get_grammar_qa_keyboard())
        )
        print(f"DEBUG: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ª—É—á–∏–ª –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ –≥—Ä–∞–º–º–∞—Ç–∏–∫–µ.")

    except Exception as e:
        await thinking_msg.delete()
        await message.answer(
            "–ò–∑–≤–∏–Ω–∏, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–≤–æ–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞. "
            "–ü–æ–ø—Ä–æ–±—É–π –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å.",
            reply_markup=get_keyboard_with_menu(get_grammar_qa_keyboard())
        )
        print(f"ERROR: –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ –≥—Ä–∞–º–º–∞—Ç–∏–∫–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")


@router.callback_query(F.data == "grammar_now_understood", LessonStates.GRAMMAR_QA)
async def grammar_now_understood(callback: CallbackQuery, state: FSMContext, user_statistics: UserStatistics,
                                 user_progress: UserProgress):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–Ω—è–ª –ø–æ—Å–ª–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è"""
    await callback.answer()
    user_id = callback.from_user.id
    lesson_id = CURRENT_LESSON_ID

    try:
        user_statistics.mark_block_completed(user_id, lesson_id, "grammar", completed=True)
        print(f"DEBUG: –ë–ª–æ–∫ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (–ø–æ—Å–ª–µ –≤–æ–ø—Ä–æ—Å–æ–≤).")

        print(f"DEBUG: –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –æ—Ç–º–µ—Ç–∏—Ç—å —É—Ä–æ–∫ –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (–ø–æ—Å–ª–µ –≤–æ–ø—Ä–æ—Å–æ–≤).")
        user_statistics._check_and_mark_lesson_completed(user_id, lesson_id)

        print(
            f"DEBUG: –í—ã–∑–æ–≤ user_statistics.save_data() –∏–∑ grammar_now_understood –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")  # –ù–û–í–û–ï –û–¢–õ–ê–î–û–ß–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï
        user_statistics.save_data()
        print(
            f"DEBUG: –î–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ø–æ—Å–ª–µ grammar_now_understood –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")  # –ù–û–í–û–ï –û–¢–õ–ê–î–û–ß–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï
    except Exception as stat_e:
        print(f"ERROR: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –≤ grammar_now_understood –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {stat_e}")
        print(traceback.format_exc())

    print(f"DEBUG: –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ grammar_now_understood –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (–ø–µ—Ä–µ–¥ edit_text).")
    try:
        await callback.message.edit_text(
            "üéâ –ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ! –¢–µ–ø–µ—Ä—å —Ç—ã –ø–æ–Ω–∏–º–∞–µ—à—å –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∞–≤–∏–ª–æ!\n\n"
            "–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –±–ª–æ–∫—É...",
            reply_markup=get_keyboard_with_menu(get_next_keyboard())
        )
        print(f"DEBUG: –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
    except Exception as e:
        print(f"ERROR: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ grammar_now_understood –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        print(traceback.format_exc())
        await callback.message.answer(
            "üéâ –ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ! –¢–µ–ø–µ—Ä—å —Ç—ã –ø–æ–Ω–∏–º–∞–µ—à—å –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∞–≤–∏–ª–æ!\n\n"
            "–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –±–ª–æ–∫—É...",
            reply_markup=get_keyboard_with_menu(get_next_keyboard())
        )
    finally:
        print(f"DEBUG: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ grammar_now_understood –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (–ø–æ—Å–ª–µ try-except).")

    await state.set_state(LessonStates.GRAMMAR_COMPLETE)
    user_progress.clear_current_block_data(user_id)
    print(f"DEBUG: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–µ—Ä–µ—à–µ–ª –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ GRAMMAR_COMPLETE (–ø–æ—Å–ª–µ –≤–æ–ø—Ä–æ—Å–æ–≤).")


@router.callback_query(F.data == "grammar_still_questions", LessonStates.GRAMMAR_QA)
async def grammar_still_questions(callback: CallbackQuery, state: FSMContext, user_statistics: UserStatistics, user_progress: UserProgress):
    """–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã"""
    user_id = callback.from_user.id
    await callback.message.edit_text(
        "–ó–∞–¥–∞–π —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ –≥—Ä–∞–º–º–∞—Ç–∏–∫–µ:",
        reply_markup=get_keyboard_with_menu(get_grammar_qa_keyboard())
    )

    # –û—Å—Ç–∞–µ–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ GRAMMAR_QA –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
    print(f"DEBUG: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Å—Ç–∞–ª—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ GRAMMAR_QA –¥–ª—è –Ω–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.")
    await callback.answer()

@router.callback_query(F.data == "next", LessonStates.GRAMMAR_COMPLETE)
async def grammar_complete_next(callback: CallbackQuery, state: FSMContext, user_statistics: UserStatistics, user_progress: UserProgress):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –±–ª–æ–∫–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –ª–µ–∫—Å–∏–∫–æ-–≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º"""
    user_id = callback.from_user.id
    lesson_id = CURRENT_LESSON_ID

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –±–ª–æ–∫ (–ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è)
    user_progress.update_progress(
        user_id,
        current_block="lexico_grammar", # –û—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫ –¥–ª—è –≤—Å–µ—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
        current_item=0
    )
    print(f"DEBUG: –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –±–ª–æ–∫–∞ lexico_grammar.")

    await callback.message.edit_text(
        "üéâ –ì—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±–ª–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
        "–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º..."
    )

    # –ó–∞–ø—É—Å–∫–∞–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è —Å –≥–ª–∞–≥–æ–ª–∞–º–∏
    await start_verb_exercise(user_id, callback.message, state, user_statistics, user_progress)

    await callback.answer()

# --- –ü–æ–¥–±–ª–æ–∫: –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è —Å –≥–ª–∞–≥–æ–ª–∞–º–∏ (VERB_EXERCISE) ---

async def start_verb_exercise(user_id: int, message: Message, state: FSMContext, user_statistics: UserStatistics, user_progress: UserProgress):
    """–ù–∞—á–∞–ª–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π —Å –≥–ª–∞–≥–æ–ª–∞–º–∏"""
    verb_data = await load_json_data("verb_it.json")
    print(f"DEBUG: verb_data = {verb_data}")
    if not verb_data:
        await message.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π")
        return

    print(f"DEBUG: verb_data length = {len(verb_data)}")

    await state.update_data(
        verb_exercises=verb_data,
        current_verb=0,
        verb_score=0
    )

    await message.answer(MESSAGES["verb_exercise_intro"])
    await show_verb_exercise(user_id, message, state, user_statistics, user_progress)


async def show_verb_exercise(user_id: int, message: Message, state: FSMContext, user_statistics: UserStatistics, user_progress: UserProgress):
    """–ü–æ–∫–∞–∑–∞—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ —Å –≥–ª–∞–≥–æ–ª–∞–º–∏"""
    data = await state.get_data()
    exercises = data.get("verb_exercises", [])
    current_index = data.get("current_verb", 0)

    if current_index >= len(exercises):
        score = data.get("verb_score", 0)
        await message.answer(
            f"{MESSAGES['verb_exercise_complete']}\n\n"
            f"–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score}/{len(exercises)} ‚ú®",
            reply_markup=get_keyboard_with_menu(get_next_keyboard())
        )
        user_statistics.update_block_score(user_id, CURRENT_LESSON_ID, "lexico_grammar", "verb", score, len(exercises))
        print(f"DEBUG: Setting state to VERB_COMPLETE for user {user_id}") # ADDED DEBUG
        await state.set_state(LessonStates.VERB_COMPLETE)
        return

    current_exercise = exercises[current_index]

    await message.answer(
        f"üíª **–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ {current_index + 1}/{len(exercises)}:**\n\n{current_exercise['text']}",
        parse_mode="Markdown",
        reply_markup=get_keyboard_with_menu(get_text_exercise_keyboard())
    )

    await state.set_state(LessonStates.VERB_EXERCISE)


@router.message(F.text, LessonStates.VERB_EXERCISE)
async def process_verb_answer(message: Message, state: FSMContext, user_statistics: UserStatistics, user_progress: UserProgress):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ —Å –≥–ª–∞–≥–æ–ª–∞–º–∏"""
    user_id = message.from_user.id
    data = await state.get_data()
    exercises = data.get("verb_exercises", [])
    current_index = data.get("current_verb", 0)
    score = data.get("verb_score", 0)

    if current_index >= len(exercises):
        return

    current_exercise = exercises[current_index]
    user_answer = message.text.strip().lower()
    correct_answer = current_exercise["answer"].lower()

    is_correct = (user_answer == correct_answer) # –î–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    user_statistics.add_lexical_attempt(user_id, "verb", current_exercise["text"], is_correct, CURRENT_LESSON_ID, user_message=user_answer) # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ø—ã—Ç–∫—É

    if is_correct:
        response_text = MESSAGES["correct_answer"]
        score += 1
        await state.update_data(verb_score=score)
    else:
        explanation = current_exercise.get('explanation', '')
        response_text = f"{MESSAGES['wrong_answer']}{current_exercise['answer']}\n\nüí° {explanation}" if explanation else f"{MESSAGES['wrong_answer']}{current_exercise['answer']}"

    await message.answer(
        response_text,
        parse_mode="Markdown",
        reply_markup=get_keyboard_with_menu(get_continue_keyboard())
    )


@router.callback_query(F.data == "skip_text_exercise", LessonStates.VERB_EXERCISE)
async def skip_verb_exercise(callback: CallbackQuery, state: FSMContext, user_statistics: UserStatistics, user_progress: UserProgress):
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ —Å –≥–ª–∞–≥–æ–ª–∞–º–∏"""
    user_id = callback.from_user.id
    data = await state.get_data()
    current_index = data.get("current_verb", 0)
    # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    exercises = data.get("verb_exercises", [])
    if current_index < len(exercises):
        current_exercise = exercises[current_index]
        user_statistics.add_lexical_attempt(user_id, "verb", current_exercise["text"], False, CURRENT_LESSON_ID, user_message="–ü—Ä–æ–ø—É—â–µ–Ω–æ")

    await state.update_data(current_verb=current_index + 1)
    await show_verb_exercise(user_id, callback.message, state, user_statistics, user_progress)
    await callback.answer()


@router.callback_query(F.data == "continue_exercise", LessonStates.VERB_EXERCISE)
async def continue_verb_exercise_specific(callback: CallbackQuery, state: FSMContext, user_statistics: UserStatistics, user_progress: UserProgress):
    """–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è —Å –≥–ª–∞–≥–æ–ª–∞–º–∏"""
    user_id = callback.from_user.id
    data = await state.get_data()
    current_index = data.get("current_verb", 0)
    await state.update_data(current_verb=current_index + 1)

    await show_verb_exercise(user_id, callback.message, state, user_statistics, user_progress)
    await callback.answer()


@router.callback_query(F.data == "next", LessonStates.VERB_COMPLETE)
async def verb_complete_next(callback: CallbackQuery, state: FSMContext, user_statistics: UserStatistics, user_progress: UserProgress):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π —Å –≥–ª–∞–≥–æ–ª–∞–º–∏, –ø–µ—Ä–µ—Ö–æ–¥ –∫ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–º—É –≤—ã–±–æ—Ä—É"""
    print(f"DEBUG: Entering verb_complete_next handler for user {callback.from_user.id}") # ADDED DEBUG LINE
    user_id = callback.from_user.id
    await callback.message.edit_text("–û—Ç–ª–∏—á–Ω–æ! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ç–∏–ø—É —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π...")
    print('DEBUG: 1')
    user_statistics.mark_block_completed(user_id, CURRENT_LESSON_ID, "lexico_grammar", "verb") # –û—Ç–º–µ—á–∞–µ–º –ø–æ–¥–±–ª–æ–∫ –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π
    print('DEBUG: 2')
    # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å –±–ª–æ–∫–∞ lexico_grammar, –µ—Å–ª–∏ –≤—Å–µ –ø–æ–¥–±–ª–æ–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã
    # (–≠—Ç–∞ –ª–æ–≥–∏–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ UserStatistics._check_and_mark_lesson_completed –∏–ª–∏ –∑–¥–µ—Å—å)
    try:
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–µ—Ä–µ–¥–∞—á–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –≤ update_progress –∫–∞–∫ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ
        user_progress.update_progress(user_id, current_block="lexico_grammar", current_item=1)
        print('DEBUG: 3 - user_progress.update_progress completed')
    except Exception as e:
        print(f"ERROR: Failed to update user_progress: {e}")
        traceback.print_exc()
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await callback.answer()
        return

    try:
        await start_mchoice_exercise(user_id, callback.message, state, user_statistics, user_progress)
        print('DEBUG: 4 - start_mchoice_exercise called')
    except Exception as e:
        print(f"ERROR: Failed to start mchoice exercise: {e}")
        traceback.print_exc()
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await callback.answer()
        return

    await callback.answer()

async def start_mchoice_exercise(user_id: int, message: Message, state: FSMContext, user_statistics: UserStatistics, user_progress: UserProgress):
    """–ù–∞—á–∞–ª–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –≤—ã–±–æ—Ä–æ–º"""
    mchoice_data = await load_json_data("mchoice_it.json")
    if not mchoice_data:
        await message.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π —Å –≤—ã–±–æ—Ä–æ–º")
        return

    await state.update_data(
        mchoice_exercises=mchoice_data,
        current_mchoice=0,
        mchoice_score=0
    )

    await message.answer(MESSAGES["mchoice_intro"])
    await show_mchoice_exercise(user_id, message, state, user_statistics, user_progress)


async def show_mchoice_exercise(user_id: int, message: Message, state: FSMContext, user_statistics: UserStatistics, user_progress: UserProgress):
    """–ü–æ–∫–∞–∑–∞—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –≤—ã–±–æ—Ä–æ–º"""
    data = await state.get_data()
    exercises = data.get("mchoice_exercises", [])
    current_index = data.get("current_mchoice", 0)

    if current_index >= len(exercises):
        score = data.get("mchoice_score", 0)
        await message.answer(
            f"{MESSAGES['mchoice_complete']}\n\n"
            f"–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score}/{len(exercises)} ‚ú®",
            reply_markup=get_keyboard_with_menu(get_next_keyboard())
        )
        user_statistics.update_block_score(user_id, CURRENT_LESSON_ID, "lexico_grammar", "mchoice", score, len(exercises))
        await state.set_state(LessonStates.MCHOICE_COMPLETE)
        return

    current_exercise = exercises[current_index]

    await message.answer(
        f"üíª **–í—ã–±–µ—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç ({current_index + 1}/{len(exercises)}):**\n\n{current_exercise['sentence']}",
        parse_mode="Markdown",
        reply_markup=get_keyboard_with_menu(get_mchoice_keyboard(current_exercise['options'], current_index))
    )

    await state.set_state(LessonStates.MCHOICE_EXERCISE)


@router.callback_query(F.data.startswith("mchoice_"), LessonStates.MCHOICE_EXERCISE)
async def process_mchoice_answer(callback: CallbackQuery, state: FSMContext, user_statistics: UserStatistics, user_progress: UserProgress):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –≤—ã–±–æ—Ä–æ–º"""
    user_id = callback.from_user.id
    data = await state.get_data()
    exercises = data.get("mchoice_exercises", [])
    current_index = data.get("current_mchoice", 0)
    score = data.get("mchoice_score", 0)

    if current_index >= len(exercises):
        return

    current_exercise = exercises[current_index]

    parts = callback.data.split("_")
    if len(parts) >= 4:
        selected_answer = parts[3]
    else:
        selected_answer = ""

    correct_answer = current_exercise["answer"]

    is_correct = (selected_answer == correct_answer) # –î–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    user_statistics.add_lexical_attempt(user_id, "mchoice", current_exercise["sentence"], is_correct, CURRENT_LESSON_ID, user_message=selected_answer) # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ø—ã—Ç–∫—É

    if is_correct:
        response_text = MESSAGES["correct_answer"]
        score += 1
        await state.update_data(mchoice_score=score)
    else:
        explanation = current_exercise.get('explanation', '')
        response_text = f"{MESSAGES['wrong_answer']}{correct_answer}\n\nüí° {explanation}" if explanation else f"{MESSAGES['wrong_answer']}{correct_answer}"

    await callback.message.edit_text(
        f"**–í–æ–ø—Ä–æ—Å:** {current_exercise['sentence']}\n**–¢–≤–æ–π –æ—Ç–≤–µ—Ç:** {selected_answer}\n\n{response_text}",
        parse_mode="Markdown",
        reply_markup=get_keyboard_with_menu(get_continue_keyboard())
    )

    await callback.answer()


@router.callback_query(F.data == "continue_exercise", LessonStates.MCHOICE_EXERCISE)
async def continue_mchoice_exercise_specific(callback: CallbackQuery, state: FSMContext, user_statistics: UserStatistics, user_progress: UserProgress):
    """–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –≤—ã–±–æ—Ä–æ–º"""
    user_id = callback.from_user.id
    data = await state.get_data()
    current_index = data.get("current_mchoice", 0)
    await state.update_data(current_mchoice=current_index + 1)

    await show_mchoice_exercise(user_id, callback.message, state, user_statistics, user_progress)
    await callback.answer()


@router.callback_query(F.data == "next", LessonStates.MCHOICE_COMPLETE)
async def mchoice_complete_next(callback: CallbackQuery, state: FSMContext, user_progress: UserProgress, user_statistics: UserStatistics):
    user_id = callback.from_user.id
    await callback.message.edit_text("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –ø–æ–ø—Ä–æ–±—É–µ–º —Å—Ç—Ä–æ–∏—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.")

    user_statistics.mark_block_completed(user_id, CURRENT_LESSON_ID, "lexico_grammar", "mchoice") # –û—Ç–º–µ—á–∞–µ–º –ø–æ–¥–±–ª–æ–∫ –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π
    user_progress.update_progress(user_id, current_block="lexico_grammar", current_item=2) # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø–æ–¥–±–ª–æ–∫—É

    await start_negative_exercise(user_id, callback.message, state, user_statistics, user_progress)
    await callback.answer()

async def start_negative_exercise(user_id: int, message: Message, state: FSMContext, user_statistics: UserStatistics, user_progress: UserProgress):
    """–ù–∞—á–∞–ª–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –Ω–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –≤ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—É—é —Ñ–æ—Ä–º—É"""
    negative_data = await load_json_data("negative_it.json")
    if not negative_data:
        await message.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –Ω–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è")
        return

    await state.update_data(
        negative_exercises=negative_data,
        current_negative=0,
        negative_score=0
    )

    await message.answer("‚úçÔ∏è **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:** –ü—Ä–µ–æ–±—Ä–∞–∑—É–π –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—É—é —Ñ–æ—Ä–º—É –∏ –æ—Ç–ø—Ä–∞–≤—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç.")

    await show_negative_exercise(user_id, message, state, user_statistics, user_progress)

async def show_negative_exercise(user_id: int, message: Message, state: FSMContext, user_statistics: UserStatistics, user_progress: UserProgress):
    data = await state.get_data()
    exercises = data.get("negative_exercises", [])
    current_index = data.get("current_negative", 0)

    if current_index >= len(exercises):
        score = data.get("negative_score", 0)
        await message.answer(
            f"üéâ –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –≤—Å–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è!\n–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score}/{len(exercises)} ‚ú®",
            reply_markup=get_keyboard_with_menu(get_next_keyboard())
        )
        user_statistics.update_block_score(user_id, CURRENT_LESSON_ID, "lexico_grammar", "negative", score, len(exercises))
        await state.set_state(LessonStates.NEGATIVE_COMPLETE)
        return

    current_exercise = exercises[current_index]
    await message.answer(
        f"üíª **–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ {current_index + 1}/{len(exercises)}:**\n"
        f"{current_exercise['text']}",
        parse_mode="Markdown"
    )
    await state.set_state(LessonStates.NEGATIVE_EXERCISE)


@router.message(F.text, LessonStates.NEGATIVE_EXERCISE)
async def process_negative_answer(message: Message, state: FSMContext, user_statistics: UserStatistics, user_progress: UserProgress):
    user_id = message.from_user.id
    user_answer = message.text.strip().lower()
    data = await state.get_data()
    exercises = data.get("negative_exercises", [])
    current_index = data.get("current_negative", 0)
    score = data.get("negative_score", 0)

    if current_index >= len(exercises):
        return

    current_exercise = exercises[current_index]
    correct_answers = [ans.lower() for ans in current_exercise["answer"]]

    is_correct = any(user_answer == ans for ans in correct_answers) # –î–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    user_statistics.add_lexical_attempt(user_id, "negative", current_exercise["text"], is_correct, CURRENT_LESSON_ID, user_message=user_answer) # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ø—ã—Ç–∫—É

    if is_correct:
        response_text = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!"
        score += 1
        await state.update_data(negative_score=score)
    else:
        examples = "\n".join([f"- {ans}" for ans in current_exercise["answer"]])
        response_text = f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ.\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:\n{examples}"

    await message.answer(f"{response_text}\n\n–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—é...")
    await state.update_data(current_negative=current_index + 1)
    await show_negative_exercise(user_id, message, state, user_statistics, user_progress)


@router.callback_query(F.data == "next", LessonStates.NEGATIVE_COMPLETE)
async def negative_complete_next(callback: CallbackQuery, state: FSMContext, user_statistics: UserStatistics, user_progress: UserProgress):
    user_id = callback.from_user.id
    await callback.message.edit_text("–û—Ç–ª–∏—á–Ω–æ! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ç–∏–ø—É —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π...")
    user_statistics.mark_block_completed(user_id, CURRENT_LESSON_ID, "lexico_grammar", "negative") # –û—Ç–º–µ—á–∞–µ–º –ø–æ–¥–±–ª–æ–∫ –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π
    user_progress.update_progress(user_id, current_block="lexico_grammar", current_item=3) # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø–æ–¥–±–ª–æ–∫—É
    await start_question_exercise(user_id, callback.message, state, user_statistics, user_progress)
    await callback.answer()

async def start_question_exercise(user_id: int, message: Message, state: FSMContext, user_statistics: UserStatistics, user_progress: UserProgress):
    """–ù–∞—á–∞–ª–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –≤ –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—É—é —Ñ–æ—Ä–º—É"""
    question_data = await load_json_data("question_it.json")
    if not question_data:
        await message.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –Ω–∞ –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è")
        return

    await state.update_data(
        question_exercises=question_data,
        current_question=0,
        question_score=0
    )

    await message.answer(
        "‚ùì **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:** –ü—Ä–µ–æ–±—Ä–∞–∑—É–π –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤ –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—É—é —Ñ–æ—Ä–º—É –∏ –æ—Ç–ø—Ä–∞–≤—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç."
    )
    await show_question_exercise(user_id, message, state, user_statistics, user_progress)


async def show_question_exercise(user_id: int, message: Message, state: FSMContext, user_statistics: UserStatistics, user_progress: UserProgress):
    data = await state.get_data()
    exercises = data.get("question_exercises", [])
    current_index = data.get("current_question", 0)

    if current_index >= len(exercises):
        score = data.get("question_score", 0)
        await message.answer(
            f"üéâ –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –≤—Å–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–∞ –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ä–º—ã!\n"
            f"–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score}/{len(exercises)} ‚ú®",
            reply_markup=get_keyboard_with_menu(get_next_keyboard())
        )
        user_statistics.update_block_score(user_id, CURRENT_LESSON_ID, "lexico_grammar", "question", score, len(exercises))
        await state.set_state(LessonStates.QUESTION_COMPLETE)
        return

    current_exercise = exercises[current_index]
    await message.answer(
        f"üíª **–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ {current_index + 1}/{len(exercises)}:**\n"
        f"{current_exercise['text']}",
        parse_mode="Markdown"
    )
    await state.set_state(LessonStates.QUESTION_EXERCISE)


@router.message(F.text, LessonStates.QUESTION_EXERCISE)
async def process_question_answer(message: Message, state: FSMContext, user_statistics: UserStatistics, user_progress: UserProgress):
    user_id = message.from_user.id
    user_answer = message.text.strip().lower()
    data = await state.get_data()
    exercises = data.get("question_exercises", [])
    current_index = data.get("current_question", 0)
    score = data.get("question_score", 0)

    if current_index >= len(exercises):
        return

    current_exercise = exercises[current_index]
    correct_answer = current_exercise["answer"].lower()

    is_correct = (user_answer == correct_answer) # –î–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    user_statistics.add_lexical_attempt(user_id, "question", current_exercise["text"], is_correct, CURRENT_LESSON_ID, user_message=user_answer) # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ø—ã—Ç–∫—É

    if is_correct:
        response_text = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!"
        score += 1
        await state.update_data(question_score=score)
    else:
        response_text = (
            f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ.\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:\n- {current_exercise['answer']}"
        )

    await message.answer(
        f"{response_text}\n\n–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—é...",
        parse_mode="Markdown"
    )

    await state.update_data(current_question=current_index + 1)
    await show_question_exercise(user_id, message, state, user_statistics, user_progress)

@router.callback_query(F.data == "next", LessonStates.QUESTION_COMPLETE)
async def question_complete_next(callback: CallbackQuery, state: FSMContext, user_statistics: UserStatistics, user_progress: UserProgress):
    user_id = callback.from_user.id
    await callback.message.edit_text("–û—Ç–ª–∏—á–Ω–æ! –ò–¥–µ–º –¥–∞–ª—å—à–µ...")
    user_statistics.mark_block_completed(user_id, CURRENT_LESSON_ID, "lexico_grammar", "question") # –û—Ç–º–µ—á–∞–µ–º –ø–æ–¥–±–ª–æ–∫ –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π
    user_progress.update_progress(user_id, current_block="lexico_grammar", current_item=4) # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø–æ–¥–±–ª–æ–∫—É
    await start_missing_word(user_id, callback.message, state, user_statistics, user_progress)
    await callback.answer()

async def start_missing_word(user_id: int, message: Message, state: FSMContext, user_statistics: UserStatistics, user_progress: UserProgress):
    """–ù–∞—á–∞–ª–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è '–í—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ'"""
    missing_data = await load_json_data("missing_word_it.json")
    if not missing_data:
        await message.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è '–ü—Ä–æ–ø—É—â–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ'")
        return

    await state.update_data(
        missing_words=missing_data,
        current_missing=0,
        missing_score=0
    )

    await message.answer(
        "üî§ **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:** –í—Å—Ç–∞–≤—å –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç."
    )
    await show_missing_word_exercise(user_id, message, state, user_statistics, user_progress)


async def show_missing_word_exercise(user_id: int, message: Message, state: FSMContext, user_statistics: UserStatistics, user_progress: UserProgress):
    data = await state.get_data()
    exercises = data.get("missing_words", [])
    current_index = data.get("current_missing", 0)

    if current_index >= len(exercises):
        score = data.get("missing_score", 0)
        await message.answer(
            f"üéâ –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –≤—Å–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤!\n"
            f"–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score}/{len(exercises)} ‚ú®",
            reply_markup=get_keyboard_with_menu(get_next_keyboard())
        )
        user_statistics.update_block_score(user_id, CURRENT_LESSON_ID, "lexico_grammar", "missing_word", score, len(exercises))
        await state.set_state(LessonStates.MISSING_WORD_COMPLETE)
        return

    current_exercise = exercises[current_index]

    escaped_statement = current_exercise["statement"].replace("_", r"\_")

    await message.answer(
        f"üíª **–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ {current_index + 1}/{len(exercises)}:**\n"
        f"{escaped_statement}",
        parse_mode="Markdown"
    )
    await state.set_state(LessonStates.MISSING_WORD_EXERCISE)


@router.message(F.text, LessonStates.MISSING_WORD_EXERCISE)
async def process_missing_word_answer(message: Message, state: FSMContext, user_statistics: UserStatistics, user_progress: UserProgress):
    user_id = message.from_user.id
    user_answer = message.text.strip().lower()
    data = await state.get_data()
    exercises = data.get("missing_words", [])
    current_index = data.get("current_missing", 0)
    score = data.get("missing_score", 0)

    if current_index >= len(exercises):
        return

    current_exercise = exercises[current_index]
    correct_answers = [ans.lower() for ans in current_exercise["answers"]]

    is_correct = (user_answer in correct_answers) # –î–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    user_statistics.add_lexical_attempt(user_id, "missing_word", current_exercise["statement"], is_correct, CURRENT_LESSON_ID, user_message=user_answer) # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ø—ã—Ç–∫—É

    if is_correct:
        response_text = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!"
        score += 1
        await state.update_data(missing_score=score)
    else:
        examples = "\n".join([f"- {ans}" for ans in current_exercise["answers"]])
        response_text = f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ.\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:\n{examples}"

    await message.answer(
        f"{response_text}\n\n–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—é...",
        parse_mode="Markdown"
    )

    await state.update_data(current_missing=current_index + 1)
    await show_missing_word_exercise(user_id, message, state, user_statistics, user_progress)

@router.callback_query(F.data == "next", LessonStates.MISSING_WORD_COMPLETE)
async def missing_word_complete_next(callback: CallbackQuery, state: FSMContext, user_statistics: UserStatistics, user_progress: UserProgress):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è '–ü—Ä–æ–ø—É—â–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ', –ø–µ—Ä–µ—Ö–æ–¥ –∫  –∞—É–¥–∏—Ä–æ–≤–∞–Ω–∏—é"""
    user_id = callback.from_user.id
    await callback.message.edit_text("–û—Ç–ª–∏—á–Ω–æ! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∞—É–¥–∏—Ä–æ–≤–∞–Ω–∏—é...")
    user_statistics.mark_block_completed(user_id, CURRENT_LESSON_ID, "lexico_grammar", "missing_word") # –û—Ç–º–µ—á–∞–µ–º –ø–æ–¥–±–ª–æ–∫ –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –∑–∞–≤–µ—Ä—à–µ–Ω –ª–∏ –≤–µ—Å—å –±–ª–æ–∫ "lexico_grammar"
    # user_statistics.mark_block_completed(user_id, CURRENT_LESSON_ID, "lexico_grammar", completed=True) # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–¥–±–ª–æ–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã

    user_progress.update_progress(user_id, current_block="listening", current_item=0) # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –Ω–∞—á–∞–ª—É –±–ª–æ–∫–∞ –∞—É–¥–∏—Ä–æ–≤–∞–Ω–∏—è
    await start_listening_true_false(user_id, callback.message, state, user_statistics, user_progress)
    await callback.answer()



async def start_listening_true_false(user_id: int, message: Message, state: FSMContext, user_statistics: UserStatistics, user_progress: UserProgress):
    """–ù–∞—á–∞–ª–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π True/False –¥–ª—è –∞—É–¥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    listening_data = await load_json_data("listening_tasks_it.json")
    if not listening_data:
        await message.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∞—É–¥–∏—Ä–æ–≤–∞–Ω–∏—è")
        return

    await state.update_data(
        listening_true_false=listening_data,
        current_listening_tf=0,
        listening_tf_score=0
    )

    await message.answer(MESSAGES["listening_true_false_intro"])
    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–µ—Ä–µ–¥–∞—á–∞ user_id, user_statistics, user_progress –≤ show_listening_true_false
    await show_listening_true_false(user_id, message, state, user_statistics, user_progress)


async def show_listening_true_false(user_id: int, message: Message, state: FSMContext, user_statistics: UserStatistics, user_progress: UserProgress):
    """–ü–æ–∫–∞–∑–∞—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ True/False –¥–ª—è –∞—É–¥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    data = await state.get_data()
    exercises = data.get("listening_true_false", [])
    current_index = data.get("current_listening_tf", 0)

    if current_index >= len(exercises):
        # –í—Å–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
        score = data.get("listening_tf_score", 0)
        await message.answer(
            f"{MESSAGES['listening_true_false_complete']}\n\n"
            f"–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score}/{len(exercises)} ‚ú®",
            reply_markup=get_keyboard_with_menu(get_next_keyboard())
        )
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –ø–æ–¥–±–ª–æ–∫–∞
        user_statistics.update_block_score(user_id, CURRENT_LESSON_ID, "listening", "true_false", score, len(exercises))
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –û—Ç–º–µ—Ç–∫–∞ –ø–æ–¥–±–ª–æ–∫–∞ –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ
        user_statistics.mark_block_completed(user_id, CURRENT_LESSON_ID, "listening", "true_false")
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–º–µ—Ç–∫–∞ –æ–±—â–µ–≥–æ –±–ª–æ–∫–∞ –∞—É–¥–∏—Ä–æ–≤–∞–Ω–∏—è
        user_statistics._check_and_mark_lesson_completed(user_id, CURRENT_LESSON_ID)
        await state.set_state(LessonStates.LISTENING_TRUE_FALSE_COMPLETE)
        return

    current_exercise = exercises[current_index]

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ –¥–ª—è —Ñ—Ä–∞–∑—ã
    audio_filename = f"listening_tf_{current_index}_{current_exercise['phrase'][:20].replace(' ', '_')}"
    audio_path = await generate_audio(current_exercise['phrase'], audio_filename, 'en')

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ
    if audio_path and os.path.exists(audio_path):
        try:
            audio = FSInputFile(audio_path)
            await message.answer_voice(
                audio,
                caption="üéß **–ü—Ä–æ—Å–ª—É—à–∞–π —Ñ—Ä–∞–∑—É**",
                parse_mode="Markdown"
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ: {e}")
            await message.answer("üéß **–ê—É–¥–∏–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ**")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    await message.answer(
        f"üìù **–£—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ ({current_index + 1}/{len(exercises)}):**\n\n{current_exercise['statement']}",
        parse_mode="Markdown",
        reply_markup=get_keyboard_with_menu(get_true_false_keyboard())
    )

    await state.set_state(LessonStates.LISTENING_TRUE_FALSE)


@router.callback_query(
    F.data.in_(["listening_true", "listening_false"]),
    LessonStates.LISTENING_TRUE_FALSE
)
async def process_listening_true_false_answer(callback: CallbackQuery, state: FSMContext, user_statistics: UserStatistics):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ True/False –¥–ª—è –∞—É–¥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    user_id = callback.from_user.id
    data = await state.get_data()
    exercises = data.get("listening_true_false", [])
    current_index = data.get("current_listening_tf", 0)
    score = data.get("listening_tf_score", 0)

    if current_index >= len(exercises):
        return

    current_exercise = exercises[current_index]

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
    if callback.data == "listening_true":
        selected_answer = "True"
    else:
        selected_answer = "False"

    correct_answer = current_exercise["correct_answer"]

    is_correct = (selected_answer == correct_answer)
    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–∞–ø–∏—Å—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è True/False —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
    user_statistics.add_listening_attempt(
        user_id,
        "true_false",
        f"{current_exercise['phrase']} | {current_exercise['statement']}", # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞
        is_correct,
        CURRENT_LESSON_ID,
        user_message=selected_answer
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
    if is_correct:
        response_text = MESSAGES["correct_answer"]
        score += 1
        await state.update_data(listening_tf_score=score)
    else:
        response_text = f"{MESSAGES['wrong_answer']}{correct_answer}"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await callback.message.edit_text(
        f"**–§—Ä–∞–∑–∞:** {current_exercise['phrase']}\n"
        f"**–£—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ:** {current_exercise['statement']}\n"
        f"**–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:** {correct_answer}\n\n{response_text}",
        parse_mode="Markdown",
        reply_markup=get_keyboard_with_menu(get_continue_keyboard())
    )

    await callback.answer()


@router.callback_query(F.data == "continue_exercise", LessonStates.LISTENING_TRUE_FALSE)
async def continue_listening_tf_specific(callback: CallbackQuery, state: FSMContext, user_statistics: UserStatistics, user_progress: UserProgress):
    """–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å True/False –∞—É–¥–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    user_id = callback.from_user.id
    data = await state.get_data()
    current_index = data.get("current_listening_tf", 0)
    await state.update_data(current_listening_tf=current_index + 1)

    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_progress.update_progress(user_id, current_item=current_index + 1)

    await show_listening_true_false(user_id, callback.message, state, user_statistics, user_progress)
    await callback.answer()


@router.callback_query(F.data == "next", LessonStates.LISTENING_TRUE_FALSE_COMPLETE)
async def listening_tf_complete_next(callback: CallbackQuery, state: FSMContext, user_statistics: UserStatistics, user_progress: UserProgress):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ True/False, –ø–µ—Ä–µ—Ö–æ–¥ –∫ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–º—É –≤—ã–±–æ—Ä—É"""
    user_id = callback.from_user.id
    await callback.message.edit_text("–û—Ç–ª–∏—á–Ω–æ! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ç–∏–ø—É –∞—É–¥–∏—Ä–æ–≤–∞–Ω–∏—è...")

    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–¥–±–ª–æ–∫–∞
    user_progress.update_progress(user_id, current_block="listening", current_item=0)
    await start_listening_choice(user_id, callback.message, state, user_statistics, user_progress)
    await callback.answer()

async def start_listening_choice(user_id: int, message: Message, state: FSMContext, user_statistics: UserStatistics, user_progress: UserProgress):
    """–ù–∞—á–∞–ª–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –≤—ã–±–æ—Ä–æ–º –¥–ª—è –∞—É–¥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    listening_data = await load_json_data("listening_choice_it.json")
    if not listening_data:
        await message.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∞—É–¥–∏—Ä–æ–≤–∞–Ω–∏—è (–≤—ã–±–æ—Ä)")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(
        listening_choice=listening_data,
        current_listening_choice=0,
        listening_choice_score=0
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
    await message.answer(MESSAGES["listening_choice_intro"])

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ
    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–µ—Ä–µ–¥–∞—á–∞ user_id, user_statistics, user_progress –≤ show_listening_choice
    await show_listening_choice(user_id, message, state, user_statistics, user_progress)


async def show_listening_choice(user_id: int, message: Message, state: FSMContext, user_statistics: UserStatistics, user_progress: UserProgress):
    """–ü–æ–∫–∞–∑–∞—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –≤—ã–±–æ—Ä–æ–º –¥–ª—è –∞—É–¥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    data = await state.get_data()
    exercises = data.get("listening_choice", [])
    current_index = data.get("current_listening_choice", 0)

    if current_index >= len(exercises):
        # –í—Å–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
        score = data.get("listening_choice_score", 0)
        await message.answer(
            f"{MESSAGES['listening_choice_complete']}\n\n"
            f"–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score}/{len(exercises)} ‚ú®",
            reply_markup=get_keyboard_with_menu(get_next_keyboard())
        )
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –ø–æ–¥–±–ª–æ–∫–∞
        user_statistics.update_block_score(user_id, CURRENT_LESSON_ID, "listening", "choice", score, len(exercises))
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –û—Ç–º–µ—Ç–∫–∞ –ø–æ–¥–±–ª–æ–∫–∞ –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ
        user_statistics.mark_block_completed(user_id, CURRENT_LESSON_ID, "listening", "choice")
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–º–µ—Ç–∫–∞ –æ–±—â–µ–≥–æ –±–ª–æ–∫–∞ –∞—É–¥–∏—Ä–æ–≤–∞–Ω–∏—è
        user_statistics._check_and_mark_lesson_completed(user_id, CURRENT_LESSON_ID)
        await state.set_state(LessonStates.LISTENING_CHOICE_COMPLETE)
        return

    current_exercise = exercises[current_index]

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ –¥–ª—è —Ñ—Ä–∞–∑—ã
    audio_filename = f"listening_choice_{current_index}_{current_exercise['phrase'][:20].replace(' ', '_')}"
    audio_path = await generate_audio(current_exercise['phrase'], audio_filename, 'en')

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ
    if audio_path and os.path.exists(audio_path):
        try:
            audio = FSInputFile(audio_path)
            await message.answer_voice(
                audio,
                caption="üéß **–ü—Ä–æ—Å–ª—É—à–∞–π —Ñ—Ä–∞–∑—É 2 —Ä–∞–∑–∞**",
                parse_mode="Markdown"
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ: {e}")
            await message.answer("üéß **–ê—É–¥–∏–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ**")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
    await message.answer(
        f"‚ùì **{current_index + 1}/{len(exercises)}:**\n\n{current_exercise['question']}",
        parse_mode="Markdown",
        reply_markup=get_keyboard_with_menu(get_listening_choice_keyboard(current_exercise['options'], current_index))
    )

    await state.set_state(LessonStates.LISTENING_CHOICE)


@router.callback_query(F.data == "listening_slow_down", LessonStates.LISTENING_TRUE_FALSE)
async def slow_down_true_false(callback: CallbackQuery, state: FSMContext, user_statistics: UserStatistics, user_progress: UserProgress):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–°–∫–∞–∑–∞—Ç—å –º–µ–¥–ª–µ–Ω–Ω–µ–µ' –¥–ª—è True/False"""
    user_id = callback.from_user.id
    data = await state.get_data()
    exercises = data.get("listening_true_false", [])
    current_index = data.get("current_listening_tf", 0)

    if current_index >= len(exercises):
        return

    current_exercise = exercises[current_index]

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–º–µ–¥–ª–µ–Ω–Ω–æ–µ –∞—É–¥–∏–æ
    audio_filename = f"listening_tf_slow_{current_index}_{current_exercise['phrase'][:20].replace(' ', '_')}"
    audio_path = await generate_audio(current_exercise['phrase'], audio_filename, 'en', slow_mode=True)

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
    await callback.message.delete()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–º–µ–¥–ª–µ–Ω–Ω–æ–µ –∞—É–¥–∏–æ
    if audio_path and os.path.exists(audio_path):
        try:
            audio = FSInputFile(audio_path)
            await callback.message.answer_voice(
                audio,
                caption="üéß **–ü—Ä–æ—Å–ª—É—à–∞–π —Ñ—Ä–∞–∑—É (–º–µ–¥–ª–µ–Ω–Ω–æ)**",
                parse_mode="Markdown"
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ: {e}")
            await callback.message.answer("üéß **–ê—É–¥–∏–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ**")
    else:
        await callback.message.answer("üéß **–ê—É–¥–∏–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ**")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ
    await callback.message.answer(
        f"üìù **–£—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ ({current_index + 1}/{len(exercises)}):**\n\n{current_exercise['statement']}",
        parse_mode="Markdown",
        reply_markup=get_keyboard_with_menu(get_true_false_keyboard())
    )

    await callback.answer()

@router.callback_query(F.data == "listening_choice_slow_down", LessonStates.LISTENING_CHOICE)
async def slow_down_listening_choice(callback: CallbackQuery, state: FSMContext, user_statistics: UserStatistics, user_progress: UserProgress):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–°–∫–∞–∑–∞—Ç—å –º–µ–¥–ª–µ–Ω–Ω–µ–µ' –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞"""
        user_id = callback.from_user.id
        data = await state.get_data()
        exercises = data.get("listening_choice", [])
        current_index = data.get("current_listening_choice", 0)

        if current_index >= len(exercises):
            return

        current_exercise = exercises[current_index]

        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ç–µ–∫—É—â–∏–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ–º
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–∞—É–¥–∏–æ + –≤–æ–ø—Ä–æ—Å)
            messages_to_delete = 2

            # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ messages_to_delete —Å–æ–æ–±—â–µ–Ω–∏–π
            for i in range(messages_to_delete):
                await callback.message.bot.delete_message(
                    chat_id=callback.message.chat.id,
                    message_id=callback.message.message_id - i
                )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–º–µ–¥–ª–µ–Ω–Ω–æ–µ –∞—É–¥–∏–æ
        audio_filename = f"listening_choice_slow_{current_index}_{current_exercise['phrase'][:20].replace(' ', '_')}"
        audio_path = await generate_audio(current_exercise['phrase'], audio_filename, 'en', slow_mode=True)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–º–µ–¥–ª–µ–Ω–Ω–æ–µ –∞—É–¥–∏–æ
        if audio_path and os.path.exists(audio_path):
            try:
                audio = FSInputFile(audio_path)
                audio_msg = await callback.message.answer_voice(
                    audio,
                    caption="üéß **–ü—Ä–æ—Å–ª—É—à–∞–π —Ñ—Ä–∞–∑—É 2 —Ä–∞–∑–∞ (–º–µ–¥–ª–µ–Ω–Ω–æ)**",
                    parse_mode="Markdown"
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ: {e}")
                await callback.message.answer("üéß **–ê—É–¥–∏–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ**")
        else:
            await callback.message.answer("üéß **–ê—É–¥–∏–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ**")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –∑–∞–Ω–æ–≤–æ —Å —Ç–µ–º–∏ –∂–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
        question_msg = await callback.message.answer(
            f"‚ùì **{current_index + 1}/{len(exercises)}:**\n\n{current_exercise['question']}",
            parse_mode="Markdown",
            reply_markup=get_keyboard_with_menu(
                get_listening_choice_keyboard(current_exercise['options'], current_index))
        )

        await callback.answer()


@router.callback_query(F.data == "listening_phrases_slow_down", LessonStates.LISTENING_PHRASES)
async def slow_down_listening_phrases(callback: CallbackQuery, state: FSMContext, user_statistics: UserStatistics, user_progress: UserProgress):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–°–∫–∞–∑–∞—Ç—å –º–µ–¥–ª–µ–Ω–Ω–µ–µ' –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è —Ñ—Ä–∞–∑"""
    user_id = callback.from_user.id
    data = await state.get_data()
    exercises = data.get("listening_phrases", [])
    current_index = data.get("current_listening_phrase", 0)

    if current_index >= len(exercises):
        return

    current_exercise = exercises[current_index]

    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ç–µ–∫—É—â–∏–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ–º
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–∞—É–¥–∏–æ + –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è)
        messages_to_delete = 2

        # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ messages_to_delete —Å–æ–æ–±—â–µ–Ω–∏–π
        for i in range(messages_to_delete):
            await callback.message.bot.delete_message(
                chat_id=callback.message.chat.id,
                message_id=callback.message.message_id - i
            )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–º–µ–¥–ª–µ–Ω–Ω–æ–µ –∞—É–¥–∏–æ
    audio_filename = f"listening_phrase_slow_{current_index}_{current_exercise['phrase'][:20].replace(' ', '_')}"
    audio_path = await generate_audio(current_exercise['phrase'], audio_filename, 'en', slow_mode=True)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–º–µ–¥–ª–µ–Ω–Ω–æ–µ –∞—É–¥–∏–æ
    if audio_path and os.path.exists(audio_path):
        try:
            audio = FSInputFile(audio_path)
            audio_msg = await callback.message.answer_voice(
                audio,
                caption="üéß **–ü—Ä–æ—Å–ª—É—à–∞–π —Ñ—Ä–∞–∑—É 2 —Ä–∞–∑–∞ (–º–µ–¥–ª–µ–Ω–Ω–æ)**",
                parse_mode="Markdown"
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ: {e}")
            await callback.message.answer("üéß **–ê—É–¥–∏–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ**")
    else:
        await callback.message.answer("üéß **–ê—É–¥–∏–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ**")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –∑–∞–Ω–æ–≤–æ
    await callback.message.answer(
        f"üî§ **–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è ({current_index + 1}/{len(exercises)}):** {current_exercise.get('transcription', '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ')}\n\n"
        "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É '–ó–∞–ø–∏—Å–∞—Ç—å —Ñ—Ä–∞–∑—É' –∏ –ü–æ–≤—Ç–æ—Ä–∏ —Ñ—Ä–∞–∑—É –∑–∞ —Å–ø–∏–∫–µ—Ä–æ–º, –æ—Ç–ø—Ä–∞–≤–∏–≤ –≥–æ–ª–æ—Å–æ–≤–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:",
        parse_mode="Markdown",
        reply_markup=get_keyboard_with_menu(get_listening_phrases_keyboard())
    )

    await callback.answer()

@router.callback_query(
    F.data.startswith("listening_choice_") & ~F.data.contains("slow_down"),
    LessonStates.LISTENING_CHOICE
)
async def process_listening_choice_answer(callback: CallbackQuery, state: FSMContext, user_statistics: UserStatistics):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –¥–ª—è –∞—É–¥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    user_id = callback.from_user.id
    data = await state.get_data()
    exercises = data.get("listening_choice", [])
    current_index = data.get("current_listening_choice", 0)
    score = data.get("listening_choice_score", 0)

    if current_index >= len(exercises):
        return

    current_exercise = exercises[current_index]

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
    parts = callback.data.split("_")
    if len(parts) >= 5:
        selected_answer = "_".join(parts[4:])  # –ë–µ—Ä–µ–º –≤—Å–µ —á–∞—Å—Ç–∏ –ø–æ—Å–ª–µ —á–µ—Ç–≤–µ—Ä—Ç–æ–≥–æ _
    else:
        selected_answer = ""

    correct_answer = current_exercise["correct_answer"]

    is_correct = (selected_answer == correct_answer)
    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–∞–ø–∏—Å—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
    user_statistics.add_listening_attempt(
        user_id,
        "choice",
        f"{current_exercise['phrase']} | {current_exercise['question']}", # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞
        is_correct,
        CURRENT_LESSON_ID,
        user_message=selected_answer
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
    if is_correct:
        response_text = MESSAGES["correct_answer"]
        score += 1
        await state.update_data(listening_choice_score=score)
    else:
        response_text = f"{MESSAGES['wrong_answer']}{correct_answer}"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await callback.message.edit_text(
        f"**–§—Ä–∞–∑–∞:** {current_exercise['phrase']}\n"
        f"**–í–æ–ø—Ä–æ—Å:** {current_exercise['question']}\n"
        f"**–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:** {correct_answer}\n\n{response_text}",
        parse_mode="Markdown",
        reply_markup=get_keyboard_with_menu(get_continue_keyboard())
    )

    await callback.answer()


@router.callback_query(F.data == "continue_exercise", LessonStates.LISTENING_CHOICE)
async def continue_listening_choice_specific(callback: CallbackQuery, state: FSMContext, user_statistics: UserStatistics, user_progress: UserProgress):
    """–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä –∞—É–¥–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    user_id = callback.from_user.id
    data = await state.get_data()
    current_index = data.get("current_listening_choice", 0)
    await state.update_data(current_listening_choice=current_index + 1)

    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_progress.update_progress(user_id, current_item=current_index + 1)

    await show_listening_choice(user_id, callback.message, state, user_statistics, user_progress)
    await callback.answer()


@router.callback_query(F.data == "next", LessonStates.LISTENING_CHOICE_COMPLETE)
async def listening_choice_complete_next(callback: CallbackQuery, state: FSMContext, user_statistics: UserStatistics, user_progress: UserProgress):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞, –ø–µ—Ä–µ—Ö–æ–¥ –∫ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—é —Ñ—Ä–∞–∑"""
    user_id = callback.from_user.id
    await callback.message.edit_text("–û—Ç–ª–∏—á–Ω–æ! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—é —Ñ—Ä–∞–∑...")

    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–¥–±–ª–æ–∫–∞
    user_progress.update_progress(user_id, current_block="listening", current_item=0)
    await start_listening_phrases(user_id, callback.message, state, user_statistics, user_progress)
    await callback.answer()

async def start_listening_phrases(user_id: int, message: Message, state: FSMContext, user_statistics: UserStatistics, user_progress: UserProgress):
    """–ù–∞—á–∞–ª–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π —Å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ–º —Ñ—Ä–∞–∑"""
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    phrases_data = await load_json_data("listening_phrases_it.json")
    if not phrases_data:
        await message.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Ñ—Ä–∞–∑")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(
        listening_phrases=phrases_data,
        current_listening_phrase=0,
        listening_phrases_score=0
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
    await message.answer(MESSAGES["listening_phrases_intro"])

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ
    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–µ—Ä–µ–¥–∞—á–∞ user_id, user_statistics, user_progress –≤ show_listening_phrase
    await show_listening_phrase(user_id, message, state, user_statistics, user_progress)


async def show_listening_phrase(user_id: int, message: Message, state: FSMContext, user_statistics: UserStatistics, user_progress: UserProgress):
    """–ü–æ–∫–∞–∑–∞—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ —Å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ–º —Ñ—Ä–∞–∑—ã"""
    data = await state.get_data()
    exercises = data.get("listening_phrases", [])
    current_index = data.get("current_listening_phrase", 0)

    if current_index >= len(exercises):
        # –í—Å–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
        score = data.get("listening_phrases_score", 0)
        await message.answer(
            f"{MESSAGES['listening_phrases_complete']}\n\n"
            f"–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score}/{len(exercises)} ‚ú®",
            reply_markup=get_keyboard_with_menu(get_next_keyboard())
        )
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –ø–æ–¥–±–ª–æ–∫–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–æ–ø—ã—Ç–æ–∫
        correct_count, total_count = user_statistics.get_listening_phrases_score(user_id, CURRENT_LESSON_ID)
        user_statistics.update_block_score(user_id, CURRENT_LESSON_ID, "listening", "phrases", correct_count, total_count)
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –û—Ç–º–µ—Ç–∫–∞ –ø–æ–¥–±–ª–æ–∫–∞ –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ
        user_statistics.mark_block_completed(user_id, CURRENT_LESSON_ID, "listening", "phrases")
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–º–µ—Ç–∫–∞ –æ–±—â–µ–≥–æ –±–ª–æ–∫–∞ –∞—É–¥–∏—Ä–æ–≤–∞–Ω–∏—è
        user_statistics._check_and_mark_lesson_completed(user_id, CURRENT_LESSON_ID)
        await state.set_state(LessonStates.LISTENING_PHRASES_COMPLETE)
        return

    current_exercise = exercises[current_index]

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ –¥–ª—è —Ñ—Ä–∞–∑—ã
    audio_filename = f"listening_phrase_{current_index}_{current_exercise['phrase'][:20].replace(' ', '_')}"
    audio_path = await generate_audio(current_exercise['phrase'], audio_filename, 'en')

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ
    if audio_path and os.path.exists(audio_path):
        try:
            audio = FSInputFile(audio_path)
            await message.answer_voice(
                audio,
                caption="üéß **–ü—Ä–æ—Å–ª—É—à–∞–π —Ñ—Ä–∞–∑—É 2 —Ä–∞–∑–∞**",
                parse_mode="Markdown"
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ: {e}")
            await message.answer("üéß **–ê—É–¥–∏–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ**")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
    await message.answer(
        f"üî§ **–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è ({current_index + 1}/{len(exercises)}):** {current_exercise.get('transcription', '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ')}\n\n"
        "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É '–ó–∞–ø–∏—Å–∞—Ç—å —Ñ—Ä–∞–∑—É' –∏ –ü–æ–≤—Ç–æ—Ä–∏ —Ñ—Ä–∞–∑—É –∑–∞ —Å–ø–∏–∫–µ—Ä–æ–º, –æ—Ç–ø—Ä–∞–≤–∏–≤ –≥–æ–ª–æ—Å–æ–≤–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:",
        parse_mode="Markdown",
        reply_markup=get_keyboard_with_menu(get_listening_phrases_keyboard())
    )

    await state.set_state(LessonStates.LISTENING_PHRASES)


@router.callback_query(F.data == "record_phrase", LessonStates.LISTENING_PHRASES)
async def request_phrase_recording(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å –∑–∞–ø–∏—Å–∏ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è —Ñ—Ä–∞–∑—ã"""
    await state.set_state(LessonStates.LISTENING_PHRASES_RECORD)
    await callback.answer()


@router.message(F.voice, LessonStates.LISTENING_PHRASES_RECORD)
async def process_phrase_recording(message: Message, state: FSMContext, user_statistics: UserStatistics):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø–∏—Å–∏ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è —Ñ—Ä–∞–∑—ã –≤ –±–ª–æ–∫–µ –∞—É–¥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    user_id = message.from_user.id
    data = await state.get_data()
    exercises = data.get("listening_phrases", [])
    current_index = data.get("current_listening_phrase", 0)

    if current_index >= len(exercises):
        return

    current_exercise = exercises[current_index]
    text_to_check = current_exercise['phrase']

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º callback-—Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    async def handle_result(accuracy: float, verdict: str, analysis_text: str,
                            expected_phonemes: str, user_phonemes: str, word_results: List[Dict]):
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è —Ñ—Ä–∞–∑—ã –≤ –±–ª–æ–∫ listening_phrases
        # –ù–ï —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ pronunciation, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –æ—Ç–¥–µ–ª—å–Ω—ã–π –±–ª–æ–∫

        # –õ–æ–≥–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        log_user_result(
            user_id=str(message.from_user.id),
            result_type="phrase_pronunciation",
            result_data={
                "phrase": text_to_check,
                "accuracy": accuracy,
                "verdict": verdict,
                "passed": accuracy >= 68.0,
                "user_phonemes": user_phonemes
            }
        )

        full_response = f"{verdict}\n\nüéØ <b>–¢–æ—á–Ω–æ—Å—Ç—å:</b> {accuracy:.1f}%"
        if analysis_text:
            full_response += analysis_text

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await message.answer(
            full_response,
            reply_markup=get_keyboard_with_menu(get_phrase_result_keyboard()),
            parse_mode='HTML'
        )

        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–∞–ø–∏—Å—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è —Ñ—Ä–∞–∑
        user_statistics.add_listening_attempt(
            user_id,
            "phrases",
            text_to_check, # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —Ñ—Ä–∞–∑—ã
            accuracy >= 68.0, # is_correct
            CURRENT_LESSON_ID,
            score=accuracy, # –¢–æ—á–Ω–æ—Å—Ç—å –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è
            user_message=f"–ü—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é {accuracy:.1f}%"
        )

        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç, –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ
        if accuracy >= 68.0:  # –ò–ª–∏ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π –ø–æ—Ä–æ–≥
            score = data.get("listening_phrases_score", 0)
            await state.update_data(listening_phrases_score=score + 1)

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –∞–Ω–∞–ª–∏–∑–∞
    await analyze_pronunciation(
        message=message,
        text_to_check=text_to_check,
        callback=handle_result,
        state=state
    )

    await state.set_state(LessonStates.LISTENING_PHRASES)


@router.callback_query(F.data == "skip_phrase", LessonStates.LISTENING_PHRASES)
@router.callback_query(F.data == "skip_phrase", LessonStates.LISTENING_PHRASES_RECORD)
@router.callback_query(F.data == "next_phrase")
async def next_listening_phrase(callback: CallbackQuery, state: FSMContext, user_progress: UserProgress, user_statistics: UserStatistics):
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π —Ñ—Ä–∞–∑–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è"""
    user_id = callback.from_user.id
    data = await state.get_data()
    current_index = data.get("current_listening_phrase", 0)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Ñ—Ä–∞–∑—ã
    exercises = data.get("listening_phrases", [])
    if current_index < len(exercises):
        current_exercise = exercises[current_index]
        current_phrase = current_exercise['phrase']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å –¥–ª—è —ç—Ç–æ–π —Ñ—Ä–∞–∑—ã
        lesson_stats = user_statistics.get_lesson_stats(user_id, CURRENT_LESSON_ID)
        listening_phrases_data = lesson_stats.get("blocks", {}).get("listening_phrases", {})
        attempts = listening_phrases_data.get("attempts", [])
        
        # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å –¥–ª—è —ç—Ç–æ–π —Ñ—Ä–∞–∑—ã
        existing_attempt = None
        for attempt in attempts:
            if attempt.get("item_id") == current_phrase:
                existing_attempt = attempt
                break
        
        # –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –µ—â–µ –Ω–µ—Ç, –∑–Ω–∞—á–∏—Ç —Ñ—Ä–∞–∑–∞ –±—ã–ª–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞
        if not existing_attempt:
            user_statistics.add_listening_attempt(
                user_id,
                "phrases",
                current_phrase, # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—Ä–∞–∑—É –∫–∞–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —ç–ª–µ–º–µ–Ω—Ç–∞
                False, # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –ø—Ä–æ–ø—É—â–µ–Ω–æ
                CURRENT_LESSON_ID,
                score=0.0, # –°—á–µ—Ç 0 –¥–ª—è –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
                user_message="–ü—Ä–æ–ø—É—â–µ–Ω–æ"
            )

    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å
    await state.update_data(current_listening_phrase=current_index + 1)

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_progress.update_progress(
        user_id,
        current_item=current_index + 1
    )

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é —Ñ—Ä–∞–∑—É
    await show_listening_phrase(user_id, callback.message, state, user_statistics, user_progress)
    await callback.answer()


@router.callback_query(F.data == "retry_phrase")
async def retry_phrase(callback: CallbackQuery, state: FSMContext, user_statistics: UserStatistics, user_progress: UserProgress):
    """–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è —Ñ—Ä–∞–∑—ã"""
    user_id = callback.from_user.id
    await callback.message.edit_text(
        "üé§ –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑! –ó–∞–ø–∏—à–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ–º —Ñ—Ä–∞–∑—ã.",
        reply_markup=get_keyboard_with_menu(get_listening_phrases_keyboard())
    )

    await state.set_state(LessonStates.LISTENING_PHRASES_RECORD)
    await callback.answer()


@router.callback_query(F.data == "next", LessonStates.LISTENING_PHRASES_COMPLETE)
async def listening_phrases_complete_next(callback: CallbackQuery, state: FSMContext, user_progress: UserProgress, user_statistics: UserStatistics):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –±–ª–æ–∫–∞ –∞—É–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –ø–∏—Å—å–º—É"""
    user_id = callback.from_user.id
    await callback.message.edit_text(
        "üéâ –ë–ª–æ–∫ –∞—É–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
        "–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –±–ª–æ–∫—É –ø–∏—Å—å–º–µ–Ω–Ω–æ–π —Ä–µ—á–∏..."
    )
    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    user_progress.update_progress(
        user_id,
        current_block="writing",
        current_item=0
    )
    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –û—Ç–º–µ—Ç–∫–∞ –æ–±—â–µ–≥–æ –±–ª–æ–∫–∞ –∞—É–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ
    user_statistics.mark_block_completed(user_id, CURRENT_LESSON_ID, "listening", completed=True)
    user_statistics._check_and_mark_lesson_completed(user_id, CURRENT_LESSON_ID)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–ª–æ–∫ –ø–∏—Å—å–º–∞
    await start_writing_sentences(user_id, callback.message, state, user_statistics, user_progress)
    await callback.answer()

async def start_writing_sentences(user_id: int, message: Message, state: FSMContext, user_statistics: UserStatistics, user_progress: UserProgress):
    """–ù–∞—á–∞–ª–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –Ω–∞ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π"""
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    words_data = await load_json_data("words_written.json")
    if not words_data or "words" not in words_data:
        await message.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–∏—Å—å–º–∞")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(
        writing_words=words_data["words"],
        current_writing_word=0,
        writing_sentences_complete_count=0
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
    await message.answer(MESSAGES["writing_sentences_intro"])

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ
    await show_writing_sentence_task(user_id, message, state, user_statistics, user_progress)

async def show_writing_sentence_task(user_id: int, message: Message, state: FSMContext, user_statistics: UserStatistics, user_progress: UserProgress):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
    data = await state.get_data()
    words = data.get("writing_words", [])
    current_index = data.get("current_writing_word", 0)

    if current_index >= len(words):
        # –í—Å–µ —Å–ª–æ–≤–∞ –ø—Ä–æ–π–¥–µ–Ω—ã
        completed = data.get("writing_sentences_complete_count", 0)
        await message.answer(
            f"{MESSAGES['writing_sentences_complete']}\n\n"
            f"–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {completed}/{len(words)} ‚ú®",
            reply_markup=get_keyboard_with_menu(get_next_keyboard())
        )
        user_statistics.update_block_score(user_id, CURRENT_LESSON_ID, "writing", "sentences", completed, len(words))
        user_statistics.mark_block_completed(user_id, CURRENT_LESSON_ID, "writing", "sentences")
        await state.set_state(LessonStates.WRITING_SENTENCES_COMPLETE)
        return

    current_word = words[current_index]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ
    await message.answer(
        f"‚úçÔ∏è **{MESSAGES['writing_word_prompt']} ({current_index + 1}/{len(words)})**\n\n"
        f"**{current_word}**",
        # "–ù–∞–ø–∏—à–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å —ç—Ç–∏–º —Å–ª–æ–≤–æ–º –∏ –æ—Ç–ø—Ä–∞–≤—å –µ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:",
        parse_mode="Markdown",
        reply_markup=get_keyboard_with_menu(get_writing_skip_keyboard())
    )

    await state.set_state(LessonStates.WRITING_SENTENCES)

@router.message(F.text, LessonStates.WRITING_SENTENCES)
async def process_writing_sentence(message: Message, state: FSMContext, user_statistics: UserStatistics):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
    user_id = message.from_user.id
    user_sentence = message.text.strip()
    data = await state.get_data()
    current_word = data.get("writing_words", [])[data.get("current_writing_word", 0)]

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º
    checking_msg = await message.answer("üîÑ –ü—Ä–æ–≤–µ—Ä—è—é —Ç–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ...")

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å –ø–æ–º–æ—â—å—é AI
        feedback = await check_writing_with_ai(user_sentence, "sentence")
        is_correct = "‚úÖ" in feedback # –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏

        # –õ–æ–≥–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        log_user_result(
            user_id=str(user_id),
            result_type="writing_sentence",
            result_data={
                "word": current_word,
                "user_input": user_sentence,
                "ai_feedback": feedback,
                "is_correct": is_correct
            }
        )
        user_statistics.add_writing_attempt(user_id, "sentences", current_word, is_correct, CURRENT_LESSON_ID, user_message=user_sentence)

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≤–µ—Ä–∫–µ
        await checking_msg.delete()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
        await message.answer(
            f"**–¢–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:** {user_sentence}\n\n{feedback}",
            parse_mode="Markdown",
            reply_markup=get_keyboard_with_menu(get_continue_writing_keyboard())
        )

        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
        if is_correct:
            completed = data.get("writing_sentences_complete_count", 0)
            await state.update_data(writing_sentences_complete_count=completed + 1)

    except Exception as e:
        await checking_msg.delete()
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.",
            reply_markup=get_keyboard_with_menu(get_continue_writing_keyboard())
        )
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {e}")


@router.callback_query(F.data == "skip_writing", LessonStates.WRITING_SENTENCES)
@router.callback_query(F.data == "continue_writing", LessonStates.WRITING_SENTENCES)
async def continue_writing_sentences(callback: CallbackQuery, state: FSMContext, user_statistics: UserStatistics, user_progress: UserProgress):
    """–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–∞ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π"""
    user_id = callback.from_user.id
    data = await state.get_data()
    current_index = data.get("current_writing_word", 0)
    words = data.get("writing_words", [])

    if callback.data == "skip_writing" and current_index < len(words):
        current_word = words[current_index]
        user_statistics.add_writing_attempt(user_id, "sentences", current_word, False, CURRENT_LESSON_ID, user_message="–ü—Ä–æ–ø—É—â–µ–Ω–æ") # –ü—Ä–æ–ø—É—â–µ–Ω–æ = –Ω–µ–≤–µ—Ä–Ω–æ

    await state.update_data(current_writing_word=current_index + 1)
    user_progress.update_progress(user_id, current_item=current_index + 1)

    await show_writing_sentence_task(user_id, callback.message, state, user_statistics, user_progress)
    await callback.answer()


@router.callback_query(F.data == "next", LessonStates.WRITING_SENTENCES_COMPLETE)
async def writing_sentences_complete_next(callback: CallbackQuery, state: FSMContext, user_statistics: UserStatistics, user_progress: UserProgress):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, –ø–µ—Ä–µ—Ö–æ–¥ –∫ –ø–µ—Ä–µ–≤–æ–¥—É"""
    user_id = callback.from_user.id
    await callback.message.edit_text("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –ø–æ–ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è...")
    user_statistics.mark_block_completed(user_id, CURRENT_LESSON_ID, "writing", "sentences")
    user_progress.update_progress(user_id, current_block="writing", current_item=1) # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å

    await start_writing_translation(user_id, callback.message, state, user_statistics, user_progress)
    await callback.answer()


async def start_writing_translation(user_id: int, message: Message, state: FSMContext, user_statistics: UserStatistics, user_progress: UserProgress):
    """–ù–∞—á–∞–ª–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π"""
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    translation_data = await load_json_data("sentence_translation_it.json")
    if not translation_data or "phrases" not in translation_data:
        await message.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(
        translation_phrases=translation_data["phrases"],
        current_translation=0,
        translation_complete_count=0
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
    await message.answer(MESSAGES["writing_translation_intro"])

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ
    await show_writing_translation_task(user_id, message, state, user_statistics, user_progress)


async def show_writing_translation_task(user_id: int, message: Message, state: FSMContext, user_statistics: UserStatistics, user_progress: UserProgress):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
    data = await state.get_data()
    phrases = data.get("translation_phrases", [])
    current_index = data.get("current_translation", 0)

    if current_index >= len(phrases):
        # –í—Å–µ —Ñ—Ä–∞–∑—ã –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã
        completed = data.get("translation_complete_count", 0)
        await message.answer(
            f"{MESSAGES['writing_translation_complete']}\n\n"
            f"–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ: {completed}/{len(phrases)} ‚ú®",
            reply_markup=get_keyboard_with_menu(get_next_keyboard())
        )
        user_statistics.update_block_score(user_id, CURRENT_LESSON_ID, "writing", "translation", completed, len(phrases))
        user_statistics.mark_block_completed(user_id, CURRENT_LESSON_ID, "writing", "translation")
        await state.set_state(LessonStates.WRITING_TRANSLATION_COMPLETE)
        return

    current_phrase = phrases[current_index]

    await state.update_data(current_translation_phrase=current_phrase)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ
    await message.answer(
        f"üåê **{MESSAGES['writing_translate_prompt']} ({current_index + 1}/{len(phrases)})**\n\n"
        f"**{current_phrase}**\n\n"
        "–ù–∞–ø–∏—à–∏ –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –∏ –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:",
        parse_mode="Markdown",
        reply_markup=get_keyboard_with_menu(get_writing_skip_keyboard())
    )

    await state.set_state(LessonStates.WRITING_TRANSLATION)


@router.message(F.text, LessonStates.WRITING_TRANSLATION)
async def process_writing_translation(message: Message, state: FSMContext, user_statistics: UserStatistics):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
    user_id = message.from_user.id
    user_translation = message.text.strip()

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º
    checking_msg = await message.answer("üîÑ –ü—Ä–æ–≤–µ—Ä—è—é –≤–∞—à –ø–µ—Ä–µ–≤–æ–¥...")

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é —Ñ—Ä–∞–∑—É
        data = await state.get_data()
        original_phrase = data.get("current_translation_phrase", "")

        # –ü–µ—Ä–µ–¥–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é —Ñ—Ä–∞–∑—É –≤ —Ñ—É–Ω–∫—Ü–∏—é
        feedback = await check_writing_with_ai(user_translation, "translation", original_phrase)
        is_correct = "‚úÖ" in feedback # –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏

        # –õ–æ–≥–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        log_user_result(
            user_id=str(user_id),
            result_type="writing_translation",
            result_data={
                "original_phrase": original_phrase,
                "user_translation": user_translation,
                "ai_feedback": feedback,
                "is_correct": is_correct
            }
        )
        user_statistics.add_writing_attempt(user_id, "translation", original_phrase, is_correct, CURRENT_LESSON_ID, user_message=user_translation)

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≤–µ—Ä–∫–µ
        await checking_msg.delete()

        # –í –æ—Ç–≤–µ—Ç–µ –ø–æ–∫–∞–∑–∞—Ç—å –æ–±–µ —Ñ—Ä–∞–∑—ã
        await message.answer(
            f"**–ò—Å—Ö–æ–¥–Ω–∞—è —Ñ—Ä–∞–∑–∞:** {original_phrase}\n"
            f"**–í–∞—à –ø–µ—Ä–µ–≤–æ–¥:** {user_translation}\n\n{feedback}",
            parse_mode="Markdown",
            reply_markup=get_keyboard_with_menu(get_continue_writing_keyboard())
        )

        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
        if is_correct:
            completed = data.get("translation_complete_count", 0)
            await state.update_data(translation_complete_count=completed + 1)

    except Exception as e:
        await checking_msg.delete()
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–µ—Ä–µ–≤–æ–¥–∞.",
            reply_markup=get_keyboard_with_menu(get_continue_writing_keyboard())
        )
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")

@router.callback_query(F.data == "skip_writing", LessonStates.WRITING_TRANSLATION)
@router.callback_query(F.data == "continue_writing", LessonStates.WRITING_TRANSLATION)
async def continue_writing_translation(callback: CallbackQuery, state: FSMContext, user_statistics: UserStatistics, user_progress: UserProgress):
    """–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥"""
    user_id = callback.from_user.id
    data = await state.get_data()
    current_index = data.get("current_translation", 0)
    phrases = data.get("translation_phrases", [])

    if callback.data == "skip_writing" and current_index < len(phrases):
        original_phrase = phrases[current_index]
        user_statistics.add_writing_attempt(user_id, "translation", original_phrase, False, CURRENT_LESSON_ID, user_message="–ü—Ä–æ–ø—É—â–µ–Ω–æ") # –ü—Ä–æ–ø—É—â–µ–Ω–æ = –Ω–µ–≤–µ—Ä–Ω–æ

    await state.update_data(current_translation=current_index + 1)
    user_progress.update_progress(user_id, current_item=current_index + 1)

    await show_writing_translation_task(user_id, callback.message, state, user_statistics, user_progress)
    await callback.answer()

# –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –±–ª–æ–∫–∞ –ø–∏—Å—å–º–∞:
@router.callback_query(F.data == "next", LessonStates.WRITING_TRANSLATION_COMPLETE)
async def writing_translation_complete_next(callback: CallbackQuery, state: FSMContext, user_progress: UserProgress, user_statistics: UserStatistics):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –±–ª–æ–∫–∞ –ø–∏—Å—å–º–µ–Ω–Ω–æ–π —Ä–µ—á–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≥–æ–≤–æ—Ä–µ–Ω–∏—é"""
    user_id = callback.from_user.id
    await callback.message.edit_text(
        "üéâ –ë–ª–æ–∫ –ø–∏—Å—å–º–µ–Ω–Ω–æ–π —Ä–µ—á–∏ –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
        "–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º—É –±–ª–æ–∫—É - –≥–æ–≤–æ—Ä–µ–Ω–∏–µ..."
    )
    user_statistics.mark_block_completed(user_id, CURRENT_LESSON_ID, "writing", completed=True) # –û—Ç–º–µ—á–∞–µ–º –æ–±—â–∏–π –±–ª–æ–∫ –ø–∏—Å—å–º–∞
    user_statistics._check_and_mark_lesson_completed(user_id, CURRENT_LESSON_ID) # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —É—Ä–æ–∫–∞

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    user_progress.update_progress(
        user_id,
        current_block="speaking",
        current_item=0
    )

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–ª–æ–∫ –≥–æ–≤–æ—Ä–µ–Ω–∏—è
    await start_speaking_block(user_id, callback.message, state, user_statistics, user_progress)
    await callback.answer()


async def start_speaking_block(user_id: int, message: Message, state: FSMContext, user_statistics: UserStatistics, user_progress: UserProgress):
    """–ù–∞—á–∞–ª–æ –±–ª–æ–∫–∞ –≥–æ–≤–æ—Ä–µ–Ω–∏—è"""
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–º—ã –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è
    speaking_data = await load_json_data("speaking_it.json")
    if not speaking_data or "topics" not in speaking_data:
        await message.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–º –¥–ª—è –≥–æ–≤–æ—Ä–µ–Ω–∏—è")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(
        speaking_topics=speaking_data["topics"],
        current_speaking_topic=0,
        speaking_complete_count=0
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
    await message.answer(MESSAGES["speaking_intro"])

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Ç–µ–º—É
    await show_speaking_topic(user_id, message, state, user_statistics, user_progress)


async def show_speaking_topic(user_id: int, message: Message, state: FSMContext, user_statistics: UserStatistics, user_progress: UserProgress):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–º—É –¥–ª—è –≥–æ–≤–æ—Ä–µ–Ω–∏—è"""
    data = await state.get_data()
    topics = data.get("speaking_topics", [])
    current_index = data.get("current_speaking_topic", 0)

    if current_index >= len(topics):
        # –í—Å–µ —Ç–µ–º—ã –ø—Ä–æ–π–¥–µ–Ω—ã - –∫—É—Ä—Å –∑–∞–≤–µ—Ä—à–µ–Ω!
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—á–µ—Ç –∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        correctly_completed_topics_count, total_topics_count = user_statistics.get_speaking_block_score(user_id, "topics", CURRENT_LESSON_ID)

        await message.answer(
            f"{MESSAGES['speaking_complete']}\n\n"
            f"–¢–µ–º –æ–±—Å—É–∂–¥–µ–Ω–æ: {total_topics_count}/{total_topics_count} üéØ\n\n" # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º total_topics_count –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            f"{MESSAGES['speaking_final']}",
            reply_markup=get_keyboard_with_menu(get_final_keyboard())
        )
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –æ–±—â–µ–≥–æ –±–ª–æ–∫–∞ "speaking" —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º correctly_completed_topics_count
        user_statistics.update_block_score(user_id, CURRENT_LESSON_ID, "speaking", "topics", correctly_completed_topics_count, total_topics_count)
        user_statistics.mark_block_completed(user_id, CURRENT_LESSON_ID, "speaking", completed=True) # –ü–æ–º–µ—á–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –±–ª–æ–∫ –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π
        user_statistics._check_and_mark_lesson_completed(user_id, CURRENT_LESSON_ID)
        await state.set_state(LessonStates.SPEAKING_COMPLETE)
        return

    current_topic = topics[current_index]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–º—É –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è
    await message.answer(
        f"üéôÔ∏è **{MESSAGES['speaking_situation']} ({current_index + 1}/{len(topics)})**\n\n"
        f"*{current_topic}*\n\n",
        # f"{MESSAGES['speaking_instruction']}",
        parse_mode="Markdown",
        reply_markup=get_keyboard_with_menu(get_speaking_keyboard())
    )

    await state.set_state(LessonStates.SPEAKING)


@router.callback_query(F.data == "record_speaking", LessonStates.SPEAKING)
async def request_speaking_recording(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å –∑–∞–ø–∏—Å–∏ –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏—è"""
    await callback.message.answer(
        "üé§ **–ó–∞–ø–∏—à–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–≤–æ–º–∏ –º—ã—Å–ª—ã–º–∏ –ø–æ —Ç–µ–º–µ.**\n\n"
        "üí° –ì–æ–≤–æ—Ä–∏ —Å–≤–æ–±–æ–¥–Ω–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ. –ú–æ–∂–µ—à—å —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ —Å–≤–æ–µ–º –æ–ø—ã—Ç–µ, "
        "–ø—Ä–∏–≤–µ—Å—Ç–∏ –ø—Ä–∏–º–µ—Ä—ã –∏–∑ —Ä–∞–±–æ—Ç—ã –∏–ª–∏ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –º–Ω–µ–Ω–∏–µ–º.\n\n"
        "–î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞–∂–º–∏ –Ω–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω –≤ –Ω–∏–∂–Ω–µ–º –ø—Ä–∞–≤–æ–º —É–≥–ª—É  –≤ Telegram –∏ –Ω–∞—á–Ω–∏ –≥–æ–≤–æ—Ä–∏—Ç—å.",
        parse_mode="Markdown",
        reply_markup=get_keyboard_with_menu(get_speaking_keyboard())
    )

    await state.set_state(LessonStates.SPEAKING_RECORD)
    await callback.answer()


@router.message(F.voice, LessonStates.SPEAKING_RECORD)
async def process_speaking_recording(message: Message, state: FSMContext, user_statistics: UserStatistics):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø–∏—Å–∏ –≥–æ–≤–æ—Ä–µ–Ω–∏—è"""
    user_id = message.from_user.id
    data = await state.get_data()
    topics = data.get("speaking_topics", [])
    current_index = data.get("current_speaking_topic", 0)

    if current_index >= len(topics):
        return

    current_topic = topics[current_index]

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
    analyzing_msg = await message.answer(MESSAGES["speaking_analyzing"])

    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        voice_file = await message.bot.get_file(message.voice.file_id)
        voice_path = f"media/audio/speaking_{message.from_user.id}_{current_index}.ogg"

        await message.bot.download_file(voice_file.file_path, voice_path)

        # –ü—Ä–æ—Å—Ç–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ - Whisper API)
        transcribed_text = await transcribe_audio_simple(voice_path)

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å –ø–æ–º–æ—â—å—é AI
        analysis = await analyze_speaking_with_ai(transcribed_text, current_topic)
        # –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ AI –¥–∞–ª –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–∑—ã–≤)
        is_correct = "‚úÖ" in analysis or "—Ö–æ—Ä–æ—à–æ" in analysis.lower() or "–æ—Ç–ª–∏—á–Ω–æ" in analysis.lower()

        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        dialogue_id = f"speaking_{user_id}_{current_index}"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∏–∞–ª–æ–≥ –≥–æ–≤–æ—Ä–µ–Ω–∏—è
        user_statistics.save_speaking_dialogue(
            user_id=user_id,
            user_message=transcribed_text,
            gpt_response=analysis,
            topic=current_topic,
            dialogue_id=dialogue_id
        )

        # –õ–æ–≥–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        log_user_result(
            user_id=str(user_id),
            result_type="speaking_exercise",
            result_data={
                "topic": current_topic,
                "user_speech": transcribed_text,
                "ai_analysis": analysis,
                "is_correct": is_correct
            }
        )
        user_statistics.add_speaking_attempt(user_id, "topics", current_topic, is_correct, CURRENT_LESSON_ID)

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        if os.path.exists(voice_path):
            os.remove(voice_path)

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∞–Ω–∞–ª–∏–∑–µ
        await analyzing_msg.delete()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑
        await message.answer(
            f"**–¢–≤–æ—è —Ç–µ–º–∞:** {current_topic}\n\n"
            f"**–¢–≤–æ–µ –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏–µ** {transcribed_text}\n\n"
            f"{analysis}",
            parse_mode="Markdown",
            reply_markup=get_keyboard_with_menu(get_speaking_result_keyboard())
)

        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
        if is_correct:
            completed = data.get("speaking_complete_count", 0)
            await state.update_data(speaking_complete_count=completed + 1)

    except Exception as e:
        await analyzing_msg.delete()
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏—è.",
            reply_markup=get_keyboard_with_menu(get_speaking_result_keyboard())
        )
        print(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ—á–∏: {e}")


@router.callback_query(F.data == "skip_speaking", LessonStates.SPEAKING)
@router.callback_query(F.data == "skip_speaking", LessonStates.SPEAKING_RECORD)
@router.callback_query(F.data == "next_speaking")
async def next_speaking_topic(callback: CallbackQuery, state: FSMContext, user_progress: UserProgress, user_statistics: UserStatistics):
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π —Ç–µ–º–µ –¥–ª—è –≥–æ–≤–æ—Ä–µ–Ω–∏—è"""
    user_id = callback.from_user.id
    data = await state.get_data()
    current_index = data.get("current_speaking_topic", 0)
    topics = data.get("speaking_topics", [])

    if callback.data == "skip_speaking" and current_index < len(topics):
        current_topic = topics[current_index]
        user_statistics.add_speaking_attempt(user_id, "topics", current_topic, False, CURRENT_LESSON_ID) # –ü—Ä–æ–ø—É—â–µ–Ω–æ = –Ω–µ–≤–µ—Ä–Ω–æ

    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å
    await state.update_data(current_speaking_topic=current_index + 1)

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_progress.update_progress(
        user_id,
        current_item=current_index + 1
    )

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é —Ç–µ–º—É
    await show_speaking_topic(user_id, callback.message, state, user_statistics, user_progress)
    await callback.answer()


@router.callback_query(F.data == "retry_speaking")
async def retry_speaking(callback: CallbackQuery, state: FSMContext, user_statistics: UserStatistics, user_progress: UserProgress):
    """–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø–∏—Å—å –ø–æ —Ç–æ–π –∂–µ —Ç–µ–º–µ"""
    user_id = callback.from_user.id
    await callback.message.edit_text(
        "üé§ –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑! –ó–∞–ø–∏—à–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∞—à–∏–º–∏ –º—ã—Å–ª—è–º–∏ –ø–æ —Ç–µ–º–µ.",
        reply_markup=get_keyboard_with_menu(get_speaking_keyboard())
    )

    await state.set_state(LessonStates.SPEAKING_RECORD)
    await callback.answer()
# –§–∏–Ω–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫—É—Ä—Å–∞
@router.callback_query(F.data == "main_menu", LessonStates.SPEAKING_COMPLETE)
@router.callback_query(F.data == "restart_lesson", LessonStates.SPEAKING_COMPLETE)
async def course_complete_actions(callback: CallbackQuery, state: FSMContext, user_progress: UserProgress):
    """–î–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –∫—É—Ä—Å–∞"""
    if callback.data == "restart_lesson":
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è
        await state.clear()
        user_progress.reset_progress(callback.from_user.id)

        await callback.message.edit_text(
            "üîÑ –ö—É—Ä—Å –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω! –ï—Å—Ç—å –∂–µ–ª–∞–Ω–∏–µ –ø—Ä–æ–π—Ç–∏ –µ–≥–æ –∑–∞–Ω–æ–≤–æ?\n\n"
            "–≠—Ç–æ –æ—Ç–ª–∏—á–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è –∑–Ω–∞–Ω–∏–π!",
            reply_markup=get_main_menu_keyboard()
        )
    else:
        # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await callback.message.edit_text(
            "üè† **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!**\n\n"
            "—Ç—ã –º–æ–∂–µ—à—å –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ª—é–±–æ–π –±–ª–æ–∫ –∏–ª–∏ –ø—Ä–æ–π—Ç–∏ –≤–µ—Å—å –∫—É—Ä—Å –∑–∞–Ω–æ–≤–æ.",
            parse_mode="Markdown",
            reply_markup=get_main_menu_keyboard()
        )

    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ–≥–æ –∫—É—Ä—Å–∞
@router.callback_query(F.data == "next", LessonStates.SPEAKING_COMPLETE)
async def final_course_completion(callback: CallbackQuery, state: FSMContext, user_statistics: UserStatistics):
    """–§–∏–Ω–∞–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫—É—Ä—Å–∞"""
    user_id = callback.from_user.id
    await callback.message.edit_text(
        "üéì **–ü–û–ó–î–†–ê–í–õ–Ø–ï–ú –° –ó–ê–í–ï–†–®–ï–ù–ò–ï–ú –ö–£–†–°–ê!** üéì\n\n"
        "–í—Å–µ 8 –±–ª–æ–∫–æ–≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω—ã:\n"
        "‚úÖ –ò–∑—É—á–µ–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–æ–≤\n"
        "‚úÖ –ü—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ\n"
        "‚úÖ –õ–µ–∫—Å–∏—á–µ—Å–∫–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è\n"
        "‚úÖ –ì—Ä–∞–º–º–∞—Ç–∏–∫–∞ —Å AI-—É—á–∏—Ç–µ–ª–µ–º\n"
        "‚úÖ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è\n"
        "‚úÖ –ê—É–¥–∏—Ä–æ–≤–∞–Ω–∏–µ\n"
        "‚úÖ –ü–∏—Å—å–º–µ–Ω–Ω–∞—è —Ä–µ—á—å\n"
        "‚úÖ –ì–æ–≤–æ—Ä–µ–Ω–∏–µ\n\n"
        "üöÄ –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å —É–≤–µ—Ä–µ–Ω–Ω–µ–µ –æ–±—â–∞—Ç—å—Å—è –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –≤ IT —Å—Ä–µ–¥–µ!",
        parse_mode="Markdown",
        reply_markup=get_keyboard_with_menu(get_final_keyboard())
    )
    user_statistics.mark_lesson_completed(user_id, CURRENT_LESSON_ID) # –û—Ç–º–µ—á–∞–µ–º –≤–µ—Å—å —É—Ä–æ–∫ –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π
    await state.set_state(LessonStates.LESSON_COMPLETE)
    await callback.answer()

@router.callback_query(F.data == "continue_exercise")
async def continue_exercise_handler(callback: CallbackQuery, state: FSMContext, user_statistics: UserStatistics, user_progress: UserProgress):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π - fallback"""
    current_state = await state.get_state()
    user_id = callback.from_user.id
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    print(f"–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫: —Å–æ—Å—Ç–æ—è–Ω–∏–µ {current_state}")

    # –î–û–ë–ê–í–õ–Ø–ï–ú –û–ë–†–ê–ë–û–¢–ö–£ –õ–ï–ö–°–ò–ß–ï–°–ö–ò–• –°–û–°–¢–û–Ø–ù–ò–ô
    if current_state == LessonStates.LEXICAL_EN_TO_RU:
        print("[DEBUG] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º LEXICAL_EN_TO_RU –≤ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ")
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É –∞–Ω–≥–ª–∏–π—Å–∫–∏–π -> —Ä—É—Å—Å–∫–∏–π
        data = await state.get_data()
        current_index = data.get("current_lexical_en", 0)
        new_index = current_index + 1
        await state.update_data(current_lexical_en=new_index)

        print(f"[DEBUG] –£–≤–µ–ª–∏—á–∏–ª–∏ –∏–Ω–¥–µ–∫—Å —Å {current_index} –¥–æ {new_index}")

        try:
            await show_lexical_en_question(user_id, callback.message, state, user_statistics, user_progress)
            print("[DEBUG] show_lexical_en_question —É—Å–ø–µ—à–Ω–æ –≤—ã–∑–≤–∞–Ω–∞")
        except Exception as e:
            print(f"[ERROR] –û—à–∏–±–∫–∞ –≤ show_lexical_en_question: {e}")
            await callback.message.edit_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.",
                reply_markup=get_keyboard_with_menu(get_main_menu_keyboard())
            )

        await callback.answer()
        return

    elif current_state == LessonStates.LEXICAL_RU_TO_EN:
        print("[DEBUG] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º LEXICAL_RU_TO_EN –≤ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ")
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É —Ä—É—Å—Å–∫–∏–π -> –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
        data = await state.get_data()
        current_index = data.get("current_lexical_ru", 0)
        new_index = current_index + 1
        await state.update_data(current_lexical_ru=new_index)

        print(f"[DEBUG] –£–≤–µ–ª–∏—á–∏–ª–∏ –∏–Ω–¥–µ–∫—Å —Å {current_index} –¥–æ {new_index}")

        try:
            await show_lexical_ru_question(callback.message, state, user_statistics, user_progress)
            print("[DEBUG] show_lexical_ru_question —É—Å–ø–µ—à–Ω–æ –≤—ã–∑–≤–∞–Ω–∞")
        except Exception as e:
            print(f"[ERROR] –û—à–∏–±–∫–∞ –≤ show_lexical_ru_question: {e}")
            await callback.message.edit_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.",
                reply_markup=get_keyboard_with_menu(get_main_menu_keyboard())
            )

        await callback.answer()
        return

    # –ï—Å–ª–∏ –¥–æ—à–ª–∏ –¥–æ —Å—é–¥–∞, –∑–Ω–∞—á–∏—Ç –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    await callback.message.edit_text(
        "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è.\n\n"
        "–ü–æ–ø—Ä–æ–±—É–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.",
        reply_markup=get_keyboard_with_menu(get_main_menu_keyboard())
    )
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ª–µ–∫—Å–∏—á–µ—Å–∫–∏—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
@router.callback_query(F.data == "continue_exercise")
async def continue_lexical_exercise_fallback(callback: CallbackQuery, state: FSMContext, user_statistics: UserStatistics, user_progress: UserProgress ):
    """Fallback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ª–µ–∫—Å–∏—á–µ—Å–∫–∏—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π"""
    current_state = await state.get_state()
    user_id = callback.from_user.id
    print(f"[DEBUG] FALLBACK —Å—Ä–∞–±–æ—Ç–∞–ª –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {current_state}")

    if current_state == LessonStates.LEXICAL_EN_TO_RU:
        print("[DEBUG] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º EN->RU –≤ fallback")

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É –∞–Ω–≥–ª–∏–π—Å–∫–∏–π -> —Ä—É—Å—Å–∫–∏–π
        data = await state.get_data()
        current_index = data.get("current_lexical_en", 0)
        await state.update_data(current_lexical_en=current_index + 1)

        await show_lexical_en_question(user_id, callback.message, state, user_statistics, user_progress)

    elif current_state == LessonStates.LEXICAL_RU_TO_EN:
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É —Ä—É—Å—Å–∫–∏–π -> –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
        data = await state.get_data()
        current_index = data.get("current_lexical_ru", 0)
        await state.update_data(current_lexical_ru=current_index + 1)

        await show_lexical_ru_question(callback.message, state, user_statistics, user_progress)

    else:
        # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç
        await callback.message.edit_text(
            "‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ª–µ–∫—Å–∏—á–µ—Å–∫–∏—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è—Ö.\n\n"
            "–í–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.",
            reply_markup=get_keyboard_with_menu(get_main_menu_keyboard())
        )

    await callback.answer()


# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞
@router.callback_query(F.data.startswith("lexical_"))
async def handle_lexical_fallback(callback: CallbackQuery, state: FSMContext):
    """Fallback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ª–µ–∫—Å–∏—á–µ—Å–∫–∏—Ö callback'–æ–≤"""
    current_state = await state.get_state()

    # –ï—Å–ª–∏ callback –ø—Ä–∏—à–µ–ª, –Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–µ–µ
    if current_state not in [LessonStates.LEXICAL_EN_TO_RU, LessonStates.LEXICAL_RU_TO_EN]:
        await callback.message.edit_text(
            "‚ö†Ô∏è –≠—Ç–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.\n\n"
            "–í–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —É—Ä–æ–∫–∞–º.",
            reply_markup=get_keyboard_with_menu(get_main_menu_keyboard())
        )
        await callback.answer()
        return

    # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    print(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π lexical callback: {callback.data} –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ {current_state}")
    await callback.answer("–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –µ—â–µ —Ä–∞–∑")


@router.callback_query(F.data.startswith("mchoice_"))
async def handle_mchoice_fallback(callback: CallbackQuery, state: FSMContext):
    """Fallback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è mchoice callback'–æ–≤"""
    current_state = await state.get_state()

    # –ï—Å–ª–∏ callback –ø—Ä–∏—à–µ–ª, –Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–µ–µ
    if current_state not in [LessonStates.MCHOICE_EXERCISE, LessonStates.LISTENING_CHOICE]:
        await callback.message.edit_text(
            "‚ö†Ô∏è –≠—Ç–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.\n\n"
            "–í–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —É—Ä–æ–∫–∞–º.",
            reply_markup=get_keyboard_with_menu(get_main_menu_keyboard())
        )
        await callback.answer()
        return

    # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    print(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π mchoice callback: {callback.data} –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ {current_state}")
    await callback.answer("–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –µ—â–µ —Ä–∞–∑")


@router.callback_query(F.data.startswith("listening_"))
async def handle_listening_fallback(callback: CallbackQuery, state: FSMContext):
    """Fallback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è listening callback'–æ–≤"""
    current_state = await state.get_state()

    # –ï—Å–ª–∏ callback –ø—Ä–∏—à–µ–ª, –Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–µ–µ
    if current_state not in [LessonStates.LISTENING_TRUE_FALSE, LessonStates.LISTENING_CHOICE]:
        await callback.message.edit_text(
            "‚ö†Ô∏è –≠—Ç–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.\n\n"
            "–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —É—Ä–æ–∫–∞–º.",
            reply_markup=get_keyboard_with_menu(get_main_menu_keyboard())
        )
        await callback.answer()
        return

    # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    print(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π listening callback: {callback.data} –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ {current_state}")
    await callback.answer("–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –µ—â–µ —Ä–∞–∑")


# Fallback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã—Ö callback'–æ–≤
@router.callback_query()
async def handle_unknown_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã—Ö callback'–æ–≤"""
    print(f"–ù–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã–π callback: {callback.data}")

    # –ü—Ä–æ—Å—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º callback –±–µ–∑ –¥–µ–π—Å—Ç–≤–∏–π
    await callback.answer("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–Ω–æ–ø–∫–∏.")


# Fallback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö
@router.message(F.text)
async def handle_unexpected_text(message: Message, state: FSMContext):
    current_state = await state.get_state()

    if current_state not in [
        LessonStates.VERB_EXERCISE,
        LessonStates.GRAMMAR_QA,
        LessonStates.NEGATIVE_EXERCISE,
        LessonStates.QUESTION_EXERCISE,
        LessonStates.MISSING_WORD_EXERCISE # ‚Üê –î–æ–±–∞–≤–ª–µ–Ω–æ
    ]:
        await message.answer(
            "ü§î –°–µ–π—á–∞—Å –Ω–µ –≤—Ä–µ–º—è –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=get_keyboard_with_menu(get_main_menu_keyboard())
        )

# Fallback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö
@router.message(F.voice)
async def handle_unexpected_voice(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    current_state = await state.get_state()

    # –ï—Å–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—à–ª–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –≥–¥–µ –µ–≥–æ –Ω–µ –∂–¥—É—Ç
    if current_state not in [LessonStates.PRONUNCIATION_RECORD, LessonStates.LISTENING_PHRASES_RECORD]:
        await message.answer(
            "üé§ –°–µ–π—á–∞—Å –Ω–µ –≤—Ä–µ–º—è –¥–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.\n\n"
            "–î–æ–∂–¥–∏—Å—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∏–ª–∏ –≤–µ—Ä–Ω–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=get_keyboard_with_menu(get_main_menu_keyboard())
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
@router.message()
async def handle_unexpected_message(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    current_state = await state.get_state()

    await message.answer(
        f"ü§∑‚Äç‚ôÇÔ∏è –ù–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç–æ—Ç —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è.\n\n"
        f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state or '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'}\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.",
        reply_markup=get_keyboard_with_menu(get_main_menu_keyboard())
    )

@router.callback_query()
async def debug_all_callback_queries(callback: CallbackQuery, state: FSMContext):
    current_state = await state.get_state()
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º sys.stderr.write –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
    sys.stderr.write(f"--- DEBUG (Fallback Callback Handler): –ù–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã–π callback_data='{callback.data}' –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ '{current_state}' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id} ---\n")
    sys.stderr.flush() # –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –∑–∞–ø–∏—Å—å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
    await callback.answer() # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback

