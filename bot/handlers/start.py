import sys
import os

sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext

from bot.keyboards import get_start_keyboard, get_main_menu_keyboard, get_block_menu_keyboard
from bot.states import LessonStates
from config import MESSAGES, CURRENT_LESSON_ID
from bot.statistics import UserStatistics
from bot.utils import UserProgress
router = Router()


@router.message(CommandStart())
@router.message(Command("help"))
async def start_command(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –∏ /help"""
    from bot.database import db_manager
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user_id = message.from_user.id
    user = db_manager.get_user_by_telegram_id(user_id)
    
    if user:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
        await message.answer(
            f"{MESSAGES['welcome']}\n\n"
            f"üë§ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user['username']}!</b>\n\n"
            "üéØ **–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:** –ê–Ω–≥–ª–∏–π—Å–∫–∏–π –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–≤, Data Science –∏ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π\n\n"
            "**–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —É—Ä–æ–∫–∞:**\n"
            "1. üìñ –ò–∑—É—á–µ–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–æ–≤\n"
            "2. üó£Ô∏è –ü—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ\n"
            "3. üìù –õ–µ–∫—Å–∏—á–µ—Å–∫–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è\n"
            "4. üìö –ì—Ä–∞–º–º–∞—Ç–∏–∫–∞ —Å AI-—É—á–∏—Ç–µ–ª–µ–º\n"
            "5. ‚úèÔ∏è –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è\n"
            "6. üéß –ê—É–¥–∏—Ä–æ–≤–∞–Ω–∏–µ\n"
            "7. ‚úçÔ∏è –ü–∏—Å—å–º–æ\n"
            "8. üí¨ –ì–æ–≤–æ—Ä–µ–Ω–∏–µ\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            parse_mode="HTML",
            reply_markup=get_main_menu_keyboard()
        )
    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        await message.answer(
            f"{MESSAGES['welcome']}\n\n"
            "üîê <b>–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è</b>\n\n"
            "üéØ **–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:** –ê–Ω–≥–ª–∏–π—Å–∫–∏–π –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–≤, Data Science –∏ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π\n\n"
            "**–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —É—Ä–æ–∫–∞:**\n"
            "1. üìñ –ò–∑—É—á–µ–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–æ–≤\n"
            "2. üó£Ô∏è –ü—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ\n"
            "3. üìù –õ–µ–∫—Å–∏—á–µ—Å–∫–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è\n"
            "4. üìö –ì—Ä–∞–º–º–∞—Ç–∏–∫–∞ —Å AI-—É—á–∏—Ç–µ–ª–µ–º\n"
            "5. ‚úèÔ∏è –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è\n"
            "6. üéß –ê—É–¥–∏—Ä–æ–≤–∞–Ω–∏–µ\n"
            "7. ‚úçÔ∏è –ü–∏—Å—å–º–æ\n"
            "8. üí¨ –ì–æ–≤–æ—Ä–µ–Ω–∏–µ\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            parse_mode="HTML",
            reply_markup=get_main_menu_keyboard()
        )


@router.message(Command("lesson"))
async def lesson_command(message: Message, state: FSMContext, user_statistics: UserStatistics, user_progress: UserProgress):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ —É—Ä–æ–∫–∞"""
    await message.answer(MESSAGES["start_lesson"])
    await state.set_state(LessonStates.TERMS_START)

    from bot.handlers.lesson import start_terms_block
    await start_terms_block(message.from_user.id, message, state, user_statistics, user_progress)


@router.message(Command("restart"))
async def restart_command(message: Message, state: FSMContext, user_progress: UserProgress):
    """–ö–æ–º–∞–Ω–¥–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —É—Ä–æ–∫–∞"""
    await state.clear()

    user_progress.reset_progress(message.from_user.id)

    await message.answer(
        "üîÑ –£—Ä–æ–∫ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω!\\n\\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_menu_keyboard()
    )


@router.message(Command("listening"))
async def listening_command(message: Message, state: FSMContext, user_statistics: UserStatistics, user_progress: UserProgress):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –±–ª–æ–∫–∞ –∞—É–¥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    await message.answer("üéß –ó–∞–ø—É—Å–∫–∞–µ–º –±–ª–æ–∫ –∞—É–¥–∏—Ä–æ–≤–∞–Ω–∏—è...")
    from bot.handlers.lesson import start_listening_true_false
    await start_listening_true_false(message.from_user.id, message, state, user_statistics, user_progress)


@router.message(Command("terms"))
async def terms_command(message: Message, state: FSMContext, user_statistics: UserStatistics, user_progress: UserProgress):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –±–ª–æ–∫–∞ —Ç–µ—Ä–º–∏–Ω–æ–≤"""
    await message.answer("üìñ –ó–∞–ø—É—Å–∫–∞–µ–º –±–ª–æ–∫ –∏–∑—É—á–µ–Ω–∏—è —Ç–µ—Ä–º–∏–Ω–æ–≤...")
    from bot.handlers.lesson import start_terms_block
    await start_terms_block(message.from_user.id, message, state, user_statistics, user_progress)


@router.callback_query(F.data == "start_lesson")
async def start_lesson(callback: CallbackQuery, state: FSMContext, user_statistics: UserStatistics, user_progress: UserProgress ):
    """–ù–∞—á–∞–ª–æ —É—Ä–æ–∫–∞"""
    await callback.message.edit_text(
        MESSAGES["start_lesson"]
    )

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –±–ª–æ–∫—É —Ç–µ—Ä–º–∏–Ω–æ–≤
    await state.set_state(LessonStates.TERMS_START)

    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –≤—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ—Ä–º–∏–Ω–æ–≤
    from bot.handlers.lesson import start_terms_block

    print(f"DEBUG (start_lesson): –í—ã–∑—ã–≤–∞—é start_terms_block –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")

    await start_terms_block(callback.from_user.id, callback.message, state, user_statistics, user_progress)

    await callback.answer()

@router.message(Command("progress"))
@router.callback_query(F.data == "show_statistics")
async def show_user_statistics(
    update: Message | CallbackQuery,
    user_statistics: UserStatistics
):
    print("DEBUG: Handler show_user_statistics called!")

    try:
        if isinstance(update, Message):
            user_id = update.from_user.id
            message = update
        else: # CallbackQuery
            user_id = update.from_user.id
            message = update.message
            await update.answer()

        stats = user_statistics.get_user_stats(user_id)

        print(f"DEBUG: User ID: {user_id}, Stats: {stats}")

        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ —É—Ä–æ–∫—É
        overall_percentage = user_statistics.get_lesson_overall_percentage(user_id, CURRENT_LESSON_ID)
        
        progress_message = "<b>üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n"
        progress_message += f"<b>–ü—Ä–æ–π–¥–µ–Ω–æ —É—Ä–æ–∫–æ–≤:</b> {stats['total_lessons_completed']}\n\n"
        progress_message += f"<b>–£—Ä–æ–∫:</b> {CURRENT_LESSON_ID}\n"
        progress_message += f"<b>–û–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ —É—Ä–æ–∫—É:</b> {overall_percentage}%\n\n"

        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –±–ª–æ–∫–æ–≤ –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
        block_display_names = {
            "terms": "üìñ –ò–∑—É—á–µ–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–æ–≤",
            "pronunciation": "üó£Ô∏è –ü—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ",
            "lexical": "üìù –õ–µ–∫—Å–∏–∫–∞ (–û–±—â–∏–π)",
            "lexical_en_to_ru": "üìù –õ–µ–∫—Å–∏–∫–∞ (–ê–Ω–≥–ª->–†—É—Å)",
            "lexical_ru_to_en": "üìù –õ–µ–∫—Å–∏–∫–∞ (–†—É—Å->–ê–Ω–≥–ª)",
            "lexical_word_build": "üî§ –°–±–æ—Ä–∫–∞ —Å–ª–æ–≤",
            "grammar": "üìö –ì—Ä–∞–º–º–∞—Ç–∏–∫–∞ (–ü—Ä–∞–≤–∏–ª–æ)",
            "lexico_grammar": "‚úèÔ∏è –õ–µ–∫—Å–∏–∫–æ-–≥—Ä–∞–º–º–∞—Ç–∏–∫–∞ (–û–±—â–∏–π)",
            "lexico_grammar_verb": "‚úèÔ∏è –ì–ª–∞–≥–æ–ª—ã",
            "lexico_grammar_mchoice": "‚úèÔ∏è –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä",
            "lexico_grammar_negative": "‚úèÔ∏è –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ",
            "lexico_grammar_question": "‚úèÔ∏è –í–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ",
            "lexico_grammar_missing_word": "‚úèÔ∏è –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞",
            "listening": "üéß –ê—É–¥–∏—Ä–æ–≤–∞–Ω–∏–µ (–û–±—â–∏–π)",
            "listening_true_false": "üéß –ê—É–¥–∏—Ä–æ–≤–∞–Ω–∏–µ (True/False)",
            "listening_choice": "üéß –ê—É–¥–∏—Ä–æ–≤–∞–Ω–∏–µ (–í—ã–±–æ—Ä)",
            "listening_phrases": "üéß –ê—É–¥–∏—Ä–æ–≤–∞–Ω–∏–µ (–§—Ä–∞–∑—ã)",
            "writing": "‚úçÔ∏è –ü–∏—Å—å–º–æ (–û–±—â–∏–π)",
            "writing_sentences": "‚úçÔ∏è –ü–∏—Å—å–º–æ (–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)",
            "writing_translation": "‚úçÔ∏è –ü–∏—Å—å–º–æ (–ü–µ—Ä–µ–≤–æ–¥)",
            "speaking": "üí¨ –ì–æ–≤–æ—Ä–µ–Ω–∏–µ (–û–±—â–∏–π)",
            "speaking_topics": "üí¨ –ì–æ–≤–æ—Ä–µ–Ω–∏–µ (–¢–µ–º—ã)",
        }

        progress_message += "<b>–°—Ç–∞—Ç—É—Å –±–ª–æ–∫–æ–≤:</b>\n"
        current_lesson_blocks = stats['lessons'].get(CURRENT_LESSON_ID, {}).get('blocks', {})

        for block_name, display_name in block_display_names.items():
            block_stats = current_lesson_blocks.get(block_name, {})
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
            is_completed = block_stats.get("completed", False)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –¥–ª—è –≤—Å–µ—Ö –±–ª–æ–∫–æ–≤
            percentage = user_statistics.get_block_percentage(user_id, block_name, CURRENT_LESSON_ID)
            
            # –î–ª—è –±–ª–æ–∫–æ–≤ —Å –ø–æ–¥–±–ª–æ–∫–∞–º–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è
            if block_name not in ["terms", "speaking"] and percentage >= 100.0:
                is_completed = True
            
            completed_status = "‚úÖ –ü—Ä–æ–π–¥–µ–Ω" if is_completed else "‚è≥ –ù–µ –ø—Ä–æ–π–¥–µ–Ω"

            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã –¥–ª—è –≤—Å–µ—Ö –±–ª–æ–∫–æ–≤, –∫—Ä–æ–º–µ –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö
            score_info = ""
            if block_name not in ["terms", "speaking"] and percentage > 0:
                score_info = f" ({percentage}%)"

            progress_message += f"- {display_name}: {completed_status}{score_info}\n"

        print(f"DEBUG: Progress Message:\n{progress_message}")

        await message.answer(progress_message, parse_mode="HTML", reply_markup=get_main_menu_keyboard())
        print("DEBUG: Message sent successfully!")
    except Exception as e:
        print(f"CRITICAL ERROR IN HANDLER show_user_statistics: {e}")
        import traceback
        print(traceback.format_exc())

        if 'message' in locals() and message is not None:
            try:
                await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            except Exception as answer_e:
                print(f"ERROR: Could not send fallback error message to user: {answer_e}")


@router.callback_query(F.data == "main_menu")
async def show_main_menu(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await callback.message.edit_text(
        f"{MESSAGES['welcome']}\\n\\n"
        "üéØ **–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:** –ê–Ω–≥–ª–∏–π—Å–∫–∏–π –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–≤, Data Science –∏ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π\\n\\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode="Markdown",
        reply_markup=get_main_menu_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data == "restart_lesson")
async def restart_lesson(callback: CallbackQuery, state: FSMContext, user_progress: UserProgress):
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å
    await state.clear()

    user_progress.reset_progress(callback.from_user.id)

    try:
        await callback.message.edit_text(
            "üîÑ –£—Ä–æ–∫ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω! –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ.\\n\\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_menu_keyboard()
        )
    except Exception:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        await callback.message.answer(
            "üîÑ –£—Ä–æ–∫ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω! –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ.\\n\\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_menu_keyboard()
        )

    await callback.answer()


@router.callback_query(F.data == "continue_lesson")
async def continue_lesson(callback: CallbackQuery, state: FSMContext, user_statistics: UserStatistics, user_progress: UserProgress):
    """–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —É—Ä–æ–∫ —Å —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—Ç–∞"""


    progress = user_progress.get_progress(callback.from_user.id)
    current_block = progress.get('current_block', 'terms')

    if current_block == 'terms':
        await callback.message.edit_text("üìñ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏–∑—É—á–µ–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–æ–≤...")
        from bot.handlers.lesson import start_terms_block
        await start_terms_block(callback.from_user.id, callback.message, state, user_statistics, user_progress)

    elif current_block == 'pronunciation':
        await callback.message.edit_text("üó£Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–ª–æ–∫ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è...")
        from bot.handlers.lesson import start_pronunciation_block
        await start_pronunciation_block(callback.from_user.id, callback.message, state, user_statistics, user_progress)

    elif current_block == 'lexical': # –≠—Ç–æ –æ–±—â–∏–π –ª–µ–∫—Å–∏—á–µ—Å–∫–∏–π –±–ª–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –≤–∫–ª—é—á–∞–µ—Ç –ø–æ–¥–±–ª–æ–∫–∏
        await callback.message.edit_text("üìù –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ª–µ–∫—Å–∏—á–µ—Å–∫–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è...")
        from bot.handlers.lesson import start_lexical_en_to_ru_block
        await start_lexical_en_to_ru_block(callback.from_user.id, callback.message, state, user_statistics, user_progress)

    elif current_block == 'lexical_word_build': # –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è word_build
        await callback.message.edit_text("üî§ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–±–æ—Ä–∫—É —Å–ª–æ–≤...")
        from bot.handlers.lesson import start_word_build
        await start_word_build(callback, state, user_statistics, user_progress) # start_word_build –ø—Ä–∏–Ω–∏–º–∞–µ—Ç callback

    elif current_block == 'grammar':
        await callback.message.edit_text("üìö –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏–∑—É—á–µ–Ω–∏–µ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏...")
        from bot.handlers.lesson import start_grammar_block
        await start_grammar_block(callback.from_user.id, callback.message, state, user_statistics, user_progress) # user_id –¥–æ–±–∞–≤–ª–µ–Ω

    elif current_block == 'lexico_grammar': # –û–±—â–∏–π –±–ª–æ–∫ –¥–ª—è –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
        await callback.message.edit_text("‚úèÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è...")
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π –∏–º–µ–Ω–Ω–æ –ø–æ–¥–±–ª–æ–∫ –Ω—É–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
        current_sub_block = progress.get('current_sub_block_name', 'verb') # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º 'verb' –∫–∞–∫ –ø–µ—Ä–≤—ã–π
        if current_sub_block == 'verb':
            from bot.handlers.lesson import start_verb_exercise
            await start_verb_exercise(callback.from_user.id, callback.message, state, user_statistics, user_progress)
        elif current_sub_block == 'mchoice':
            from bot.handlers.lesson import start_mchoice_exercise
            await start_mchoice_exercise(callback.from_user.id, callback.message, state, user_statistics, user_progress)
        elif current_sub_block == 'negative':
            from bot.handlers.lesson import start_negative_exercise
            await start_negative_exercise(callback.from_user.id, callback.message, state, user_statistics, user_progress)
        elif current_sub_block == 'question':
            from bot.handlers.lesson import start_question_exercise
            await start_question_exercise(callback.from_user.id, callback.message, state, user_statistics, user_progress)
        elif current_sub_block == 'missing_word':
            from bot.handlers.lesson import start_missing_word
            await start_missing_word(callback.from_user.id, callback.message, state, user_statistics, user_progress)

    elif current_block == 'listening':
        await callback.message.edit_text("üéß –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–ª–æ–∫ –∞—É–¥–∏—Ä–æ–≤–∞–Ω–∏—è...")
        from bot.handlers.lesson import start_listening_true_false
        await start_listening_true_false(callback.from_user.id, callback.message, state, user_statistics, user_progress)

    elif current_block == 'writing':
        await callback.message.edit_text("‚úçÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–ª–æ–∫ –ø–∏—Å—å–º–µ–Ω–Ω–æ–π —Ä–µ—á–∏...")
        from bot.handlers.lesson import start_writing_sentences
        await start_writing_sentences(callback.from_user.id, callback.message, state, user_statistics, user_progress)

    else:
        await callback.message.edit_text(
            "üéâ –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –±–ª–æ–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã!\\n\\n"
            "–û—Å—Ç–∞–ª—å–Ω—ã–µ –±–ª–æ–∫–∏ (–≥–æ–≤–æ—Ä–µ–Ω–∏–µ) –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.",
            reply_markup=get_main_menu_keyboard()
        )

    await callback.answer()


@router.message(Command("writing"))
async def writing_command(message: Message, state: FSMContext, user_statistics: UserStatistics, user_progress: UserProgress):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –±–ª–æ–∫–∞ –ø–∏—Å—å–º–∞"""
    await message.answer("‚úçÔ∏è –ó–∞–ø—É—Å–∫–∞–µ–º –±–ª–æ–∫ –ø–∏—Å—å–º–µ–Ω–Ω–æ–π —Ä–µ—á–∏...")
    from bot.handlers.lesson import start_writing_sentences
    await start_writing_sentences(message.from_user.id, message, state, user_statistics, user_progress)


@router.callback_query(F.data.startswith("menu_"))
async def handle_menu_navigation(callback: CallbackQuery, state: FSMContext, user_statistics: UserStatistics, user_progress: UserProgress):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –º–µ–Ω—é"""
    menu_type = callback.data.replace("menu_", "")
    user_id = callback.from_user.id # –ü–æ–ª—É—á–∞–µ–º user_id –∑–¥–µ—Å—å

    if menu_type == "terms":
        await callback.message.edit_text(
            "üìñ **–ë–ª–æ–∫: –ò–∑—É—á–µ–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–æ–≤**\\n\\n"
            "–í —ç—Ç–æ–º –±–ª–æ–∫–µ –≤—ã –∏–∑—É—á–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Ç–µ—Ä–º–∏–Ω—ã –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏ Data Science —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º, —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π –∏ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ–º.",
            parse_mode="Markdown",
            reply_markup=get_block_menu_keyboard()
        )
        # –ú–æ–∂–Ω–æ —Å—Ä–∞–∑—É –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–ª–æ–∫ —Ç–µ—Ä–º–∏–Ω–æ–≤
        from bot.handlers.lesson import start_terms_block
        await start_terms_block(user_id, callback.message, state, user_statistics, user_progress)

    elif menu_type == "pronunciation":
        await callback.message.edit_text(
            "üó£Ô∏è **–ë–ª–æ–∫: –ü—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ**\\n\\n"
            "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è IT —Ç–µ—Ä–º–∏–Ω–æ–≤ —Å –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º–∏.",
            parse_mode="Markdown",
            reply_markup=get_block_menu_keyboard()
        )
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–ª–æ–∫ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è
        from bot.handlers.lesson import start_pronunciation_block
        await start_pronunciation_block(user_id, callback.message, state, user_statistics, user_progress)

    elif menu_type == "speaking":
        await callback.message.edit_text(
            "üí¨ **–ë–ª–æ–∫: –ì–æ–≤–æ—Ä–µ–Ω–∏–µ**\\n\\n"
            "–§–∏–Ω–∞–ª—å–Ω—ã–π –±–ª–æ–∫ –∫—É—Ä—Å–∞ - —Ä–∞–∑–≤–∏—Ç–∏–µ –Ω–∞–≤—ã–∫–æ–≤ —É—Å—Ç–Ω–æ–π —Ä–µ—á–∏ –Ω–∞ IT —Ç–µ–º—ã.",
            parse_mode="Markdown"
        )
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–ª–æ–∫ –≥–æ–≤–æ—Ä–µ–Ω–∏—è
        from bot.handlers.lesson import start_speaking_block
        await start_speaking_block(user_id, callback.message, state, user_statistics, user_progress) # user_id –¥–æ–±–∞–≤–ª–µ–Ω

    elif menu_type == "lexical":
        await callback.message.edit_text(
            "üìù **–ë–ª–æ–∫: –õ–µ–∫—Å–∏—á–µ—Å–∫–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è**\\n\\n"
            "–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤ –≤ –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã.",
            parse_mode="Markdown",
            reply_markup=get_block_menu_keyboard()
        )
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ª–µ–∫—Å–∏—á–µ—Å–∫–∏–π –±–ª–æ–∫
        from bot.handlers.lesson import start_lexical_en_to_ru_block
        await start_lexical_en_to_ru_block(user_id, callback.message, state, user_statistics, user_progress)

    elif menu_type == "grammar":
        await callback.message.edit_text(
            "üìö **–ë–ª–æ–∫: –ì—Ä–∞–º–º–∞—Ç–∏–∫–∞**\\n\\n"
            "–ò–∑—É—á–µ–Ω–∏–µ –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–∞–≤–∏–ª —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∏–∑ –º–∏—Ä–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è.",
            parse_mode="Markdown",
            reply_markup=get_block_menu_keyboard()
        )
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–ª–æ–∫ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏
        from bot.handlers.lesson import start_grammar_block
        await start_grammar_block(user_id, callback.message, state, user_statistics, user_progress) # user_id –¥–æ–±–∞–≤–ª–µ–Ω

    elif menu_type == "exercises": # –≠—Ç–æ –±—É–¥–µ—Ç –æ–±—â–∏–π –±–ª–æ–∫ –¥–ª—è lexico_grammar
        await callback.message.edit_text(
            "‚úèÔ∏è **–ë–ª–æ–∫: –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è**\\n\\n"
            "–õ–µ–∫—Å–∏–∫–æ-–≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–∞ IT —Ç–µ–º–∞—Ç–∏–∫—É.",
            parse_mode="Markdown",
            reply_markup=get_block_menu_keyboard()
        )
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π –ø–æ–¥–±–ª–æ–∫ –ª–µ–∫—Å–∏–∫–æ-–≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
        from bot.handlers.lesson import start_verb_exercise
        await start_verb_exercise(user_id, callback.message, state, user_statistics, user_progress) # user_id –¥–æ–±–∞–≤–ª–µ–Ω

    elif menu_type == "listening":
        await callback.message.edit_text(
            "üéß **–ë–ª–æ–∫: –ê—É–¥–∏—Ä–æ–≤–∞–Ω–∏–µ**\\n\\n"
            "–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Ä–µ—á–∏ –Ω–∞ —Å–ª—É—Ö —Å IT —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏–µ–π.",
            parse_mode="Markdown"
        )
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–ª–æ–∫ –∞—É–¥–∏—Ä–æ–≤–∞–Ω–∏—è
        from bot.handlers.lesson import start_listening_true_false
        await start_listening_true_false(user_id, callback.message, state, user_statistics, user_progress) # user_id –¥–æ–±–∞–≤–ª–µ–Ω

    elif menu_type == "writing":
        await callback.message.edit_text(
            "‚úçÔ∏è **–ë–ª–æ–∫: –ü–∏—Å—å–º–µ–Ω–Ω–∞—è —Ä–µ—á—å**\\n\\n"
            "–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–∞ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∏ –ø–µ—Ä–µ–≤–æ–¥ —Å IT —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏–µ–π.",
            parse_mode="Markdown"
        )
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–ª–æ–∫ –ø–∏—Å—å–º–∞
        from bot.handlers.lesson import start_writing_sentences
        await start_writing_sentences(user_id, callback.message, state, user_statistics, user_progress) # user_id –¥–æ–±–∞–≤–ª–µ–Ω

    await callback.answer()
